<?xml-stylesheet href="/rss.xsl" type="text/xsl"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Li Chen's blog</title><link>https://aspcompiler.github.io/</link><description>Recent content on Li Chen's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>2023 Li Chen</copyright><lastBuildDate>Sun, 23 Jul 2023 15:52:16 -0700</lastBuildDate><atom:link href="https://aspcompiler.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>LLVM for the impatient (3)</title><link>https://aspcompiler.github.io/posts/llvm-for-the-impatient-3/</link><pubDate>Sun, 23 Jul 2023 15:52:16 -0700</pubDate><guid>https://aspcompiler.github.io/posts/llvm-for-the-impatient-3/</guid><description>Li Chen's blog https://aspcompiler.github.io/posts/llvm-for-the-impatient-3/ -&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>In this post, we will follow LLVM tutorials &lt;a href="https://llvm.org/docs/tutorial/MyFirstLanguageFrontend/LangImpl05.html">chapter 5&lt;/a> and &lt;a href="https://llvm.org/docs/tutorial/MyFirstLanguageFrontend/LangImpl06.html">chapter 6&lt;/a>. Chapter 5 is a very important chapter that introduces control flow.&lt;/p>
&lt;p>The key to the control flow is Phi operation. If you previously skipped the &lt;a href="https://en.wikipedia.org/wiki/Static_single_assignment_form">SSA form&lt;/a>, it is not mandatory.
Make you fully understand the sections before &lt;code>Computing minimal SSA using dominance frontiers&lt;/code>. This knowledge is very important to understand Chapter 7.&lt;/p>
&lt;p>Chapter 5 also introduces looks like &lt;code>llvm-as&lt;/code> and &lt;code>opt&lt;/code>. If you have an LLVM IR file &lt;code>t.ll&lt;/code>, you can visualize with:&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>llvm-as &amp;lt; t.ll | opt -passes=view-cfg
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="ifthenelse">If/Then/Else&lt;/h1>
&lt;p>For Kaleidoscope code:&lt;/p>
&lt;pre tabindex="0">&lt;code>extern foo();
extern bar();
def baz(x) if x then foo() else bar();
&lt;/code>&lt;/pre>&lt;p>The IR looks like:&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-llvm" data-lang="llvm">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8b008b;font-weight:bold">declare&lt;/span> &lt;span style="color:#00688b;font-weight:bold">double&lt;/span> @foo()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8b008b;font-weight:bold">declare&lt;/span> &lt;span style="color:#00688b;font-weight:bold">double&lt;/span> @bar()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8b008b;font-weight:bold">define&lt;/span> &lt;span style="color:#00688b;font-weight:bold">double&lt;/span> @baz(&lt;span style="color:#00688b;font-weight:bold">double&lt;/span> &lt;span style="color:#00688b">%x&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>entry:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00688b">%ifcond&lt;/span> = &lt;span style="color:#8b008b;font-weight:bold">fcmp&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">one&lt;/span> &lt;span style="color:#00688b;font-weight:bold">double&lt;/span> &lt;span style="color:#00688b">%x&lt;/span>, &lt;span style="color:#b452cd">0.000000e+00&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8b008b;font-weight:bold">br&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">i1&lt;/span> &lt;span style="color:#00688b">%ifcond&lt;/span>, &lt;span style="color:#00688b;font-weight:bold">label&lt;/span> &lt;span style="color:#00688b">%then&lt;/span>, &lt;span style="color:#00688b;font-weight:bold">label&lt;/span> &lt;span style="color:#00688b">%else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>then: &lt;span style="color:#228b22">; preds = %entry
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#00688b">%calltmp&lt;/span> = &lt;span style="color:#8b008b;font-weight:bold">call&lt;/span> &lt;span style="color:#00688b;font-weight:bold">double&lt;/span> @foo()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8b008b;font-weight:bold">br&lt;/span> &lt;span style="color:#00688b;font-weight:bold">label&lt;/span> &lt;span style="color:#00688b">%ifcont&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>else: &lt;span style="color:#228b22">; preds = %entry
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#00688b">%calltmp1&lt;/span> = &lt;span style="color:#8b008b;font-weight:bold">call&lt;/span> &lt;span style="color:#00688b;font-weight:bold">double&lt;/span> @bar()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8b008b;font-weight:bold">br&lt;/span> &lt;span style="color:#00688b;font-weight:bold">label&lt;/span> &lt;span style="color:#00688b">%ifcont&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ifcont: &lt;span style="color:#228b22">; preds = %else, %then
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#00688b">%iftmp&lt;/span> = &lt;span style="color:#8b008b;font-weight:bold">phi&lt;/span> &lt;span style="color:#00688b;font-weight:bold">double&lt;/span> [ &lt;span style="color:#00688b">%calltmp&lt;/span>, &lt;span style="color:#00688b">%then&lt;/span> ], [ &lt;span style="color:#00688b">%calltmp1&lt;/span>, &lt;span style="color:#00688b">%else&lt;/span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8b008b;font-weight:bold">ret&lt;/span> &lt;span style="color:#00688b;font-weight:bold">double&lt;/span> &lt;span style="color:#00688b">%iftmp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Note that the &lt;code>phi&lt;/code> operation is used to merge the control flow from &lt;code>then&lt;/code> and &lt;code>else&lt;/code> blocks.&lt;/p>
&lt;p>The code to generate the IR is:&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">45
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">46
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">47
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">48
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">49
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">50
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">51
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>Value *IfExprAST::codegen() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Value *CondV = Cond-&amp;gt;codegen();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> (!CondV)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">nullptr&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#228b22">// Convert condition to a bool by comparing non-equal to 0.0.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span> CondV = Builder-&amp;gt;CreateFCmpONE(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CondV, ConstantFP::get(*TheContext, APFloat(&lt;span style="color:#b452cd">0.0&lt;/span>)), &lt;span style="color:#cd5555">&amp;#34;ifcond&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Function *TheFunction = Builder-&amp;gt;GetInsertBlock()-&amp;gt;getParent();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#228b22">// Create blocks for the then and else cases. Insert the &amp;#39;then&amp;#39; block at the
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#228b22">// end of the function.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span> BasicBlock *ThenBB = BasicBlock::Create(*TheContext, &lt;span style="color:#cd5555">&amp;#34;then&amp;#34;&lt;/span>, TheFunction);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> BasicBlock *ElseBB = BasicBlock::Create(*TheContext, &lt;span style="color:#cd5555">&amp;#34;else&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> BasicBlock *MergeBB = BasicBlock::Create(*TheContext, &lt;span style="color:#cd5555">&amp;#34;ifcont&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Builder-&amp;gt;CreateCondBr(CondV, ThenBB, ElseBB);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#228b22">// Emit then value.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span> Builder-&amp;gt;SetInsertPoint(ThenBB);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Value *ThenV = Then-&amp;gt;codegen();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> (!ThenV)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">nullptr&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Builder-&amp;gt;CreateBr(MergeBB);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#228b22">// Codegen of &amp;#39;Then&amp;#39; can change the current block, update ThenBB for the PHI.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span> ThenBB = Builder-&amp;gt;GetInsertBlock();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#228b22">// Emit else block.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span> TheFunction-&amp;gt;insert(TheFunction-&amp;gt;end(), ElseBB);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Builder-&amp;gt;SetInsertPoint(ElseBB);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Value *ElseV = Else-&amp;gt;codegen();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> (!ElseV)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">nullptr&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Builder-&amp;gt;CreateBr(MergeBB);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#228b22">// Codegen of &amp;#39;Else&amp;#39; can change the current block, update ElseBB for the PHI.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span> ElseBB = Builder-&amp;gt;GetInsertBlock();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#228b22">// Emit merge block.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span> TheFunction-&amp;gt;insert(TheFunction-&amp;gt;end(), MergeBB);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Builder-&amp;gt;SetInsertPoint(MergeBB);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> PHINode *PN = Builder-&amp;gt;CreatePHI(Type::getDoubleTy(*TheContext), &lt;span style="color:#b452cd">2&lt;/span>, &lt;span style="color:#cd5555">&amp;#34;iftmp&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> PN-&amp;gt;addIncoming(ThenV, ThenBB);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> PN-&amp;gt;addIncoming(ElseV, ElseBB);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> PN;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The new code that we have not seen before is the part after &lt;code>// Emit merge block.&lt;/code>. See how the &lt;code>PHINode&lt;/code> is generated there.&lt;/p>
&lt;h1 id="for-loop">For loop&lt;/h1>
&lt;p>Now consider the Kaleidoscope for loop:&lt;/p>
&lt;pre tabindex="0">&lt;code>extern putchard(char);
def printstar(n)
for i = 1, i &amp;lt; n, 1.0 in
putchard(42); # ascii 42 = &amp;#39;*&amp;#39;
# print 100 &amp;#39;*&amp;#39; characters
printstar(100);
&lt;/code>&lt;/pre>&lt;p>The LLVM IR looks like:&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-llvm" data-lang="llvm">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8b008b;font-weight:bold">declare&lt;/span> &lt;span style="color:#00688b;font-weight:bold">double&lt;/span> @putchard(&lt;span style="color:#00688b;font-weight:bold">double&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8b008b;font-weight:bold">define&lt;/span> &lt;span style="color:#00688b;font-weight:bold">double&lt;/span> @printstar(&lt;span style="color:#00688b;font-weight:bold">double&lt;/span> &lt;span style="color:#00688b">%n&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>entry:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#228b22">; initial value = 1.0 (inlined into phi)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">br&lt;/span> &lt;span style="color:#00688b;font-weight:bold">label&lt;/span> &lt;span style="color:#00688b">%loop&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>loop: &lt;span style="color:#228b22">; preds = %loop, %entry
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#00688b">%i&lt;/span> = &lt;span style="color:#8b008b;font-weight:bold">phi&lt;/span> &lt;span style="color:#00688b;font-weight:bold">double&lt;/span> [ &lt;span style="color:#b452cd">1.000000e+00&lt;/span>, &lt;span style="color:#00688b">%entry&lt;/span> ], [ &lt;span style="color:#00688b">%nextvar&lt;/span>, &lt;span style="color:#00688b">%loop&lt;/span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#228b22">; body
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#00688b">%calltmp&lt;/span> = &lt;span style="color:#8b008b;font-weight:bold">call&lt;/span> &lt;span style="color:#00688b;font-weight:bold">double&lt;/span> @putchard(&lt;span style="color:#00688b;font-weight:bold">double&lt;/span> &lt;span style="color:#b452cd">4.200000e+01&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#228b22">; increment
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#00688b">%nextvar&lt;/span> = &lt;span style="color:#8b008b;font-weight:bold">fadd&lt;/span> &lt;span style="color:#00688b;font-weight:bold">double&lt;/span> &lt;span style="color:#00688b">%i&lt;/span>, &lt;span style="color:#b452cd">1.000000e+00&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#228b22">; termination test
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#00688b">%cmptmp&lt;/span> = &lt;span style="color:#8b008b;font-weight:bold">fcmp&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">ult&lt;/span> &lt;span style="color:#00688b;font-weight:bold">double&lt;/span> &lt;span style="color:#00688b">%i&lt;/span>, &lt;span style="color:#00688b">%n&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00688b">%booltmp&lt;/span> = &lt;span style="color:#8b008b;font-weight:bold">uitofp&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">i1&lt;/span> &lt;span style="color:#00688b">%cmptmp&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">to&lt;/span> &lt;span style="color:#00688b;font-weight:bold">double&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00688b">%loopcond&lt;/span> = &lt;span style="color:#8b008b;font-weight:bold">fcmp&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">one&lt;/span> &lt;span style="color:#00688b;font-weight:bold">double&lt;/span> &lt;span style="color:#00688b">%booltmp&lt;/span>, &lt;span style="color:#b452cd">0.000000e+00&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8b008b;font-weight:bold">br&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">i1&lt;/span> &lt;span style="color:#00688b">%loopcond&lt;/span>, &lt;span style="color:#00688b;font-weight:bold">label&lt;/span> &lt;span style="color:#00688b">%loop&lt;/span>, &lt;span style="color:#00688b;font-weight:bold">label&lt;/span> &lt;span style="color:#00688b">%afterloop&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>afterloop: &lt;span style="color:#228b22">; preds = %loop
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#228b22">; loop always returns 0.0
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">ret&lt;/span> &lt;span style="color:#00688b;font-weight:bold">double&lt;/span> &lt;span style="color:#b452cd">0.000000e+00&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Note that the phi node is moved up to the beginning of the loop. This is because the value of &lt;code>i&lt;/code> could be from the prior code or branched back from the end of the loop.&lt;/p>
&lt;p>The code to generate the IR is:&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">45
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">46
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">47
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">48
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">49
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">50
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">51
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">52
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">53
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">54
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">55
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">56
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">57
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">58
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">59
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">60
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">61
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">62
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">63
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">64
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">65
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">66
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">67
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">68
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">69
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">70
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">71
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">72
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">73
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">74
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">75
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">76
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">77
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">78
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">79
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>Value *ForExprAST::codegen() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#228b22">// Emit the start code first, without &amp;#39;variable&amp;#39; in scope.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span> Value *StartVal = Start-&amp;gt;codegen();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> (!StartVal)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">nullptr&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#228b22">// Make the new basic block for the loop header, inserting after current
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#228b22">// block.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span> Function *TheFunction = Builder-&amp;gt;GetInsertBlock()-&amp;gt;getParent();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> BasicBlock *PreheaderBB = Builder-&amp;gt;GetInsertBlock();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> BasicBlock *LoopBB = BasicBlock::Create(*TheContext, &lt;span style="color:#cd5555">&amp;#34;loop&amp;#34;&lt;/span>, TheFunction);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#228b22">// Insert an explicit fall through from the current block to the LoopBB.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span> Builder-&amp;gt;CreateBr(LoopBB);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#228b22">// Start insertion in LoopBB.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span> Builder-&amp;gt;SetInsertPoint(LoopBB);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#228b22">// Start the PHI node with an entry for Start.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span> PHINode *Variable =
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Builder-&amp;gt;CreatePHI(Type::getDoubleTy(*TheContext), &lt;span style="color:#b452cd">2&lt;/span>, VarName);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Variable-&amp;gt;addIncoming(StartVal, PreheaderBB);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#228b22">// Within the loop, the variable is defined equal to the PHI node. If it
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#228b22">// shadows an existing variable, we have to restore it, so save it now.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span> Value *OldVal = NamedValues[VarName];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NamedValues[VarName] = Variable;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#228b22">// Emit the body of the loop. This, like any other expr, can change the
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#228b22">// current BB. Note that we ignore the value computed by the body, but don&amp;#39;t
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#228b22">// allow an error.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> (!Body-&amp;gt;codegen())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">nullptr&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#228b22">// Emit the step value.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span> Value *StepVal = &lt;span style="color:#8b008b;font-weight:bold">nullptr&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> (Step) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> StepVal = Step-&amp;gt;codegen();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> (!StepVal)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">nullptr&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#8b008b;font-weight:bold">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#228b22">// If not specified, use 1.0.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span> StepVal = ConstantFP::get(*TheContext, APFloat(&lt;span style="color:#b452cd">1.0&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Value *NextVar = Builder-&amp;gt;CreateFAdd(Variable, StepVal, &lt;span style="color:#cd5555">&amp;#34;nextvar&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#228b22">// Compute the end condition.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span> Value *EndCond = End-&amp;gt;codegen();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> (!EndCond)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">nullptr&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#228b22">// Convert condition to a bool by comparing non-equal to 0.0.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span> EndCond = Builder-&amp;gt;CreateFCmpONE(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> EndCond, ConstantFP::get(*TheContext, APFloat(&lt;span style="color:#b452cd">0.0&lt;/span>)), &lt;span style="color:#cd5555">&amp;#34;loopcond&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#228b22">// Create the &amp;#34;after loop&amp;#34; block and insert it.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span> BasicBlock *LoopEndBB = Builder-&amp;gt;GetInsertBlock();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> BasicBlock *AfterBB =
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> BasicBlock::Create(*TheContext, &lt;span style="color:#cd5555">&amp;#34;afterloop&amp;#34;&lt;/span>, TheFunction);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#228b22">// Insert the conditional branch into the end of LoopEndBB.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span> Builder-&amp;gt;CreateCondBr(EndCond, LoopBB, AfterBB);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#228b22">// Any new code will be inserted in AfterBB.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span> Builder-&amp;gt;SetInsertPoint(AfterBB);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#228b22">// Add a new entry to the PHI node for the backedge.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span> Variable-&amp;gt;addIncoming(NextVar, LoopEndBB);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#228b22">// Restore the unshadowed variable.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> (OldVal)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NamedValues[VarName] = OldVal;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8b008b;font-weight:bold">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NamedValues.erase(VarName);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#228b22">// for expr always returns 0.0.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> Constant::getNullValue(Type::getDoubleTy(*TheContext));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The most interesting things to look at are how the &lt;code>StepVal&lt;/code> is used to create &lt;code>NextVar&lt;/code> and how &lt;code>NextVar&lt;/code> is added to the PHI
using &lt;code>addIncoming&lt;/code>.&lt;/p>
&lt;h1 id="summary">Summary&lt;/h1>
&lt;p>We illustrated code surrounding the if expression and for loop. It should serves as a good template for other control flow.&lt;/p>
- https://aspcompiler.github.io/posts/llvm-for-the-impatient-3/ - 2023 Li Chen</description></item><item><title>The speed of gRPC Python is very impressive and that deserves a dive</title><link>https://aspcompiler.github.io/posts/grpc-python-is-fast/</link><pubDate>Fri, 14 Jul 2023 15:43:15 -0700</pubDate><guid>https://aspcompiler.github.io/posts/grpc-python-is-fast/</guid><description>Li Chen's blog https://aspcompiler.github.io/posts/grpc-python-is-fast/ -&lt;h1 id="intro">Intro&lt;/h1>
&lt;p>Recently, I did a small experiment to compare the &lt;a href="https://github.com/aspcompiler/grpc-perf">performance&lt;/a> of gRPC Python and other languages. The result is very impressive. I would expect to see a interpreted code many times slower than a native code. Intuitively, this can only happen if the code is mostly native. Let us dive in to see how it was implemented.&lt;/p>
&lt;h1 id="grpc-python-implementation">gRPC Python implementation&lt;/h1>
&lt;p>gRPC has 2 major parts. Its serializer is built upon &lt;a href="https://github.com/protocolbuffers/protobuf">protobuf&lt;/a>. The RPC part is built upon HTTP/2.&lt;/p>
&lt;p>The gRPC project is driven by the RFP process. gRPC Python has the following RFPs:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>L13 &lt;a href="https://github.com/grpc/proposal/blob/master/L13-python-interceptors.md">https://github.com/grpc/proposal/blob/master/L13-python-interceptors.md&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>L42 &lt;a href="https://github.com/grpc/proposal/blob/master/L42-python-metadata-flags.md">https://github.com/grpc/proposal/blob/master/L42-python-metadata-flags.md&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>L44 &lt;a href="https://github.com/grpc/proposal/blob/master/L44-python-rich-status.md">https://github.com/grpc/proposal/blob/master/L44-python-rich-status.md&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>L46 &lt;a href="https://github.com/grpc/proposal/blob/master/L46-python-compression-api.md">https://github.com/grpc/proposal/blob/master/L46-python-compression-api.md&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>L54 &lt;a href="https://github.com/grpc/proposal/blob/master/L54-python-server-wait.md">https://github.com/grpc/proposal/blob/master/L54-python-server-wait.md&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>L58 &lt;a href="https://github.com/grpc/proposal/blob/master/L58-python-async-api.md">https://github.com/grpc/proposal/blob/master/L58-python-async-api.md&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>L64 &lt;a href="https://github.com/grpc/proposal/blob/master/L64-python-runtime-proto-parsing.md">https://github.com/grpc/proposal/blob/master/L64-python-runtime-proto-parsing.md&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>L65 &lt;a href="https://github.com/grpc/proposal/blob/master/L65-python-package-name.md">https://github.com/grpc/proposal/blob/master/L65-python-package-name.md&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>L78 &lt;a href="https://github.com/grpc/proposal/blob/master/L78-python-rich-server-context.md">https://github.com/grpc/proposal/blob/master/L78-python-rich-server-context.md&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>L95 &lt;a href="https://github.com/grpc/proposal/blob/master/L95-python-reflection-client.md">https://github.com/grpc/proposal/blob/master/L95-python-reflection-client.md&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Out of them, L58 and L64 are the most interesting one. L58 is the async API. L64 is the runtime proto parsing. They are the core of the implementation.&lt;/p>
&lt;h1 id="async-api">Async API&lt;/h1>
&lt;p>L58 is a great document that is fun to read.&lt;/p>
&lt;p>The most interesting part of &lt;code>grpcio&lt;/code>, the async Python gRPC API, is that it is a wrapper over the gRPC C++ API but used the Python async model. It other words, it does not use the Python networking stack but used the networking stack of the C++ API. How are they married together?&lt;/p>
&lt;p>It turns out that the C++ API has a &lt;a href="https://grpc.github.io/grpc/cpp/classgrpc_1_1_completion_queue.html">CompletionQueue&lt;/a> interface. It allow
the clients to &lt;a href="https://grpc.io/docs/languages/cpp/async/">poll for the completion status with tag&lt;/a>.&lt;/p>
&lt;p>Any async framework requires a mechanism to yield control. Python uses &lt;a href="https://stackoverflow.com/questions/49005651/how-does-asyncio-actually-work">generator to yield&lt;/a>. Therefore, we can imaging that the wrapper just need to poll the completion queue and yield the results in the generator.&lt;/p>
&lt;p>The result is a very elegant API that allows users to implement a streaming server with extreme simplicity:&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8b008b;font-weight:bold">class&lt;/span> &lt;span style="color:#008b45;font-weight:bold">Greeter&lt;/span>(helloworld_pb2_grpc.GreeterServicer):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8b008b;font-weight:bold">async&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">def&lt;/span> &lt;span style="color:#008b45">StreamingHi&lt;/span>(self, request_iterator, context):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8b008b;font-weight:bold">async&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">for&lt;/span> request &lt;span style="color:#8b008b">in&lt;/span> request_iterator:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8b008b;font-weight:bold">yield&lt;/span> response
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>asyncio&lt;/code> is integrated C++ API using &lt;a href="https://cython.org/">Cython&lt;/a>.&lt;/p>
&lt;h1 id="cython">Cython&lt;/h1>
&lt;p>I was previously not familiar with Cython. I thought it is just a Python to C++ compiler. Many of the integrations that I have seen
where implemented using &lt;a href="https://github.com/pybind/pybind11">pybind11&lt;/a> for Python/C++ binding or &lt;a href="https://github.com/PyO3/pyo3">pyo3&lt;/a>
for Python/Rust binding.&lt;/p>
&lt;p>It turns out that Cython is also very interesting. It is a very old project dating back to 15 years ago. It has 2 syntaxes, one with the .pyx extension and the other with the .pxd extension.&lt;/p>
&lt;p>The .pyx extension is a superset of Python. It allows us to add type hints to Python so that it can generate good C++ code; remember that Python
did not have type hints 15 years ago so that .pyx extension was invented to define the Python interface.&lt;/p>
&lt;p>The .pxd extension allows us to export C++ API to Python.&lt;/p>
&lt;p>The 2 extensions are sometimes used together to allow Python and C++ to meet half way. The tool then generates C++ code that can be compiled into a Python extension. We can inspect the generated code.&lt;/p>
&lt;h1 id="protobuf">Protobuf&lt;/h1>
&lt;p>&lt;code>asyncio&lt;/code> uses the same Protobuf code as the sync code. This implementation uses the C++ protobuf runtime already built into the grpcio-tools C extension to parse the protocol buffers and generate textual Python code in memory. This code is then used to instantiate the modules to be provided to the calling application. This will be more clear when we look at the generated files.&lt;/p>
&lt;h1 id="generated-files">Generated files&lt;/h1>
&lt;p>The code generated from the proto file looks like:&lt;/p>
&lt;ul>
&lt;li>server_streaming_pb2.pyi&lt;/li>
&lt;li>server_streaming_pb2.py&lt;/li>
&lt;li>server_streaming_pb2_grpc.py&lt;/li>
&lt;/ul>
&lt;p>The first 2 files are for protobuf. The last one is for gRPC.&lt;/p>
&lt;p>&lt;code>server_streaming_pb2.pyi&lt;/code> looks like:&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8b008b;font-weight:bold">class&lt;/span> &lt;span style="color:#008b45;font-weight:bold">StreamingFromServerRequest&lt;/span>(_message.Message):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> __slots__ = [&lt;span style="color:#cd5555">&amp;#34;num_bytes&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NUM_BYTES_FIELD_NUMBER: _ClassVar[&lt;span style="color:#658b00">int&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> num_bytes: &lt;span style="color:#658b00">int&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8b008b;font-weight:bold">def&lt;/span> __init__(self, num_bytes: _Optional[&lt;span style="color:#658b00">int&lt;/span>] = ...) -&amp;gt; &lt;span style="color:#8b008b;font-weight:bold">None&lt;/span>: ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8b008b;font-weight:bold">class&lt;/span> &lt;span style="color:#008b45;font-weight:bold">StreamingFromServerResponse&lt;/span>(_message.Message):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> __slots__ = [&lt;span style="color:#cd5555">&amp;#34;data&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> DATA_FIELD_NUMBER: _ClassVar[&lt;span style="color:#658b00">int&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> data: &lt;span style="color:#658b00">bytes&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8b008b;font-weight:bold">def&lt;/span> __init__(self, data: _Optional[&lt;span style="color:#658b00">bytes&lt;/span>] = ...) -&amp;gt; &lt;span style="color:#8b008b;font-weight:bold">None&lt;/span>: ...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Note that it just define the interface for Python tools to use. It does not contain any implementation. The implementation is in
&lt;code> server_streaming_pb2.py&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(&lt;span style="color:#cd5555">b&lt;/span>&lt;span style="color:#cd5555">&amp;#39;&lt;/span>&lt;span style="color:#cd5555">\n\x16&lt;/span>&lt;span style="color:#cd5555">server_streaming.proto&lt;/span>&lt;span style="color:#cd5555">\x12\x10&lt;/span>&lt;span style="color:#cd5555">server_streaming&lt;/span>&lt;span style="color:#cd5555">\&amp;#34;&lt;/span>&lt;span style="color:#cd5555">/&lt;/span>&lt;span style="color:#cd5555">\n\x1a&lt;/span>&lt;span style="color:#cd5555">StreamingFromServerRequest&lt;/span>&lt;span style="color:#cd5555">\x12\x11\n\t&lt;/span>&lt;span style="color:#cd5555">num_bytes&lt;/span>&lt;span style="color:#cd5555">\x18\x01&lt;/span>&lt;span style="color:#cd5555"> &lt;/span>&lt;span style="color:#cd5555">\x01&lt;/span>&lt;span style="color:#cd5555">(&lt;/span>&lt;span style="color:#cd5555">\x05\&amp;#34;&lt;/span>&lt;span style="color:#cd5555">+&lt;/span>&lt;span style="color:#cd5555">\n\x1b&lt;/span>&lt;span style="color:#cd5555">StreamingFromServerResponse&lt;/span>&lt;span style="color:#cd5555">\x12\x0c\n\x04\x64\x61&lt;/span>&lt;span style="color:#cd5555">ta&lt;/span>&lt;span style="color:#cd5555">\x18\x01&lt;/span>&lt;span style="color:#cd5555"> &lt;/span>&lt;span style="color:#cd5555">\x01&lt;/span>&lt;span style="color:#cd5555">(&lt;/span>&lt;span style="color:#cd5555">\x0c\x32\x87\x01\n\x0f&lt;/span>&lt;span style="color:#cd5555">ServerStreaming&lt;/span>&lt;span style="color:#cd5555">\x12&lt;/span>&lt;span style="color:#cd5555">t&lt;/span>&lt;span style="color:#cd5555">\n\x13&lt;/span>&lt;span style="color:#cd5555">StreamingFromServer&lt;/span>&lt;span style="color:#cd5555">\x12&lt;/span>&lt;span style="color:#cd5555">,.server_streaming.StreamingFromServerRequest&lt;/span>&lt;span style="color:#cd5555">\x1a&lt;/span>&lt;span style="color:#cd5555">-.server_streaming.StreamingFromServerResponse0&lt;/span>&lt;span style="color:#cd5555">\x01\x62\x06&lt;/span>&lt;span style="color:#cd5555">proto3&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>_globals = &lt;span style="color:#658b00">globals&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, _globals)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, &lt;span style="color:#cd5555">&amp;#39;server_streaming_pb2&amp;#39;&lt;/span>, _globals)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> _descriptor._USE_C_DESCRIPTORS == &lt;span style="color:#8b008b;font-weight:bold">False&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> DESCRIPTOR._options = &lt;span style="color:#8b008b;font-weight:bold">None&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _globals[&lt;span style="color:#cd5555">&amp;#39;_STREAMINGFROMSERVERREQUEST&amp;#39;&lt;/span>]._serialized_start=&lt;span style="color:#b452cd">44&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _globals[&lt;span style="color:#cd5555">&amp;#39;_STREAMINGFROMSERVERREQUEST&amp;#39;&lt;/span>]._serialized_end=&lt;span style="color:#b452cd">91&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _globals[&lt;span style="color:#cd5555">&amp;#39;_STREAMINGFROMSERVERRESPONSE&amp;#39;&lt;/span>]._serialized_start=&lt;span style="color:#b452cd">93&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _globals[&lt;span style="color:#cd5555">&amp;#39;_STREAMINGFROMSERVERRESPONSE&amp;#39;&lt;/span>]._serialized_end=&lt;span style="color:#b452cd">136&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _globals[&lt;span style="color:#cd5555">&amp;#39;_SERVERSTREAMING&amp;#39;&lt;/span>]._serialized_start=&lt;span style="color:#b452cd">139&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _globals[&lt;span style="color:#cd5555">&amp;#39;_SERVERSTREAMING&amp;#39;&lt;/span>]._serialized_end=&lt;span style="color:#b452cd">274&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>This is not quite readable, but we can imagine that it just deserialize some data and load into the C++ code. The C++ code
then have the data structures needed to parse the protocol buffers.&lt;/p>
&lt;p>Let us now look at the gRPC code &lt;code>server_streaming_pb2_grpc.py&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8b008b;font-weight:bold">class&lt;/span> &lt;span style="color:#008b45;font-weight:bold">ServerStreaming&lt;/span>(&lt;span style="color:#658b00">object&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cd5555">&amp;#34;&amp;#34;&amp;#34;Missing associated documentation comment in .proto file.&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#707a7c">@staticmethod&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8b008b;font-weight:bold">def&lt;/span> &lt;span style="color:#008b45">StreamingFromServer&lt;/span>(request,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> target,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> options=(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> channel_credentials=&lt;span style="color:#8b008b;font-weight:bold">None&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> call_credentials=&lt;span style="color:#8b008b;font-weight:bold">None&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> insecure=&lt;span style="color:#8b008b;font-weight:bold">False&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> compression=&lt;span style="color:#8b008b;font-weight:bold">None&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> wait_for_ready=&lt;span style="color:#8b008b;font-weight:bold">None&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> timeout=&lt;span style="color:#8b008b;font-weight:bold">None&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> metadata=&lt;span style="color:#8b008b;font-weight:bold">None&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> grpc.experimental.unary_stream(request, target, &lt;span style="color:#cd5555">&amp;#39;/server_streaming.ServerStreaming/StreamingFromServer&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> server__streaming__pb2.StreamingFromServerRequest.SerializeToString,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> server__streaming__pb2.StreamingFromServerResponse.FromString,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> options, channel_credentials,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>As we can see, it calls &lt;code>grpc.experimental.unary_stream&lt;/code> and passes the serializer/deserializer from the protobuf code. The &lt;code>unary_stream&lt;/code> is because this method happen to be a unary stream call. Other possible calls unary unary, stream unary, and stream stream.&lt;/p>
&lt;p>Isn&amp;rsquo;t this implementation very elegant?&lt;/p>
&lt;h1 id="some-more-details">Some more details&lt;/h1>
&lt;p>It turns out there are several C++ protobuf implementations. We can find out which one is used by running the following code:&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a61717;background-color:#e3d2d2">$&lt;/span> python
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Python &lt;span style="color:#b452cd">3.10.9&lt;/span> (main, Dec &lt;span style="color:#b452cd">7&lt;/span> &lt;span style="color:#b452cd">2022&lt;/span>, &lt;span style="color:#b452cd">13&lt;/span>:&lt;span style="color:#b452cd">47&lt;/span>:&lt;span style="color:#b452cd">07&lt;/span>) [GCC &lt;span style="color:#b452cd">12.2.0&lt;/span>] on linux
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Type &lt;span style="color:#cd5555">&amp;#34;help&amp;#34;&lt;/span>, &lt;span style="color:#cd5555">&amp;#34;copyright&amp;#34;&lt;/span>, &lt;span style="color:#cd5555">&amp;#34;credits&amp;#34;&lt;/span> &lt;span style="color:#8b008b">or&lt;/span> &lt;span style="color:#cd5555">&amp;#34;license&amp;#34;&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">for&lt;/span> more information.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; &lt;span style="color:#8b008b;font-weight:bold">from&lt;/span> &lt;span style="color:#008b45;text-decoration:underline">google.protobuf.internal&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">import&lt;/span> api_implementation
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; &lt;span style="color:#658b00">print&lt;/span>(api_implementation.Type())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>upb
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Upc is currently Preferred. We can find more details from &lt;a href="https://github.com/protocolbuffers/upb/tree/main/python">https://github.com/protocolbuffers/upb/tree/main/python&lt;/a>&lt;/p>
&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;p>gRPC Python is extremely fast because it is mostly built around the C++ API.&lt;/p>
&lt;p>The implementation using Cython is very elegant and we can borrow the idea to speed up our own Python code.&lt;/p>
- https://aspcompiler.github.io/posts/grpc-python-is-fast/ - 2023 Li Chen</description></item><item><title>LLVM for the impatient (2)</title><link>https://aspcompiler.github.io/posts/llvm-for-the-impatient-2/</link><pubDate>Wed, 12 Jul 2023 23:28:48 -0700</pubDate><guid>https://aspcompiler.github.io/posts/llvm-for-the-impatient-2/</guid><description>Li Chen's blog https://aspcompiler.github.io/posts/llvm-for-the-impatient-2/ -&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>In the previous &lt;a href="https://aspcompiler.github.io/posts/llvm-for-the-impatient-1/">installation&lt;/a>, we provided a way to get started hands-on with LLVM with minimum effort. In this blog, we will follow the &lt;a href="https://llvm.org/docs/tutorial/MyFirstLanguageFrontend/LangImpl03.html">chapter 3&lt;/a> and &lt;a href="https://llvm.org/docs/tutorial/MyFirstLanguageFrontend/LangImpl04.html">chapter 4&lt;/a> of the LLVM tutorial to generate code.&lt;/p>
&lt;p>Chapter 3 is about building the LLVM intermediate representation(IR) from the AST. Chapter 4 is about optimization passes as well as the just-in-time(JIT) compilation.&lt;/p>
&lt;p>While the LLVM tutorials are very detailed, I will try to summarize the key points and provide some additional explanations.&lt;/p>
&lt;p>Last note of caution is that the current stable distribution is LLVM 16 while the tutorial is already updated to the pre-release of LLVM 17. So if you have installed LLVM 16 binary rather than building from the source, you may encounter compatibility issues. If so, you should
use the &lt;a href="https://github.com/llvm/llvm-project/tree/release/16.x/llvm/examples/Kaleidoscope">stable source&lt;/a> instead.&lt;/p>
&lt;h1 id="building-the-llvm-ir">Building the LLVM IR&lt;/h1>
&lt;p>The key for building the LLVM is to instantiate the &lt;code>TheContext&lt;/code>, &lt;code>Builder&lt;/code> and &lt;code>TheModule&lt;/code>. &lt;code>TheContext&lt;/code> is an opaque object that owns a lot of core LLVM data structures, such as the type and constant value tables. The &lt;code>Builder&lt;/code> object is a helper object that makes it easy to generate LLVM instructions. &lt;code>TheModule&lt;/code> is an LLVM construct that contains functions and global variables.&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8b008b;font-weight:bold">static&lt;/span> std::unique_ptr&amp;lt;LLVMContext&amp;gt; TheContext;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8b008b;font-weight:bold">static&lt;/span> std::unique_ptr&amp;lt;IRBuilder&amp;lt;&amp;gt;&amp;gt; Builder(TheContext);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8b008b;font-weight:bold">static&lt;/span> std::unique_ptr&amp;lt;Module&amp;gt; TheModule;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Building the LLVM then follow several patterns:&lt;/p>
&lt;ol>
&lt;li>Getting from Context for type and constants mentioned above.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>ConstantFP::get(*TheContext, APFloat(Val));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>FunctionType *FT =
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> FunctionType::get(Type::getDoubleTy(*TheContext), Doubles, &lt;span style="color:#658b00">false&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>Constructing using the Builder.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>Builder-&amp;gt;CreateFAdd(L, R, &lt;span style="color:#cd5555">&amp;#34;addtmp&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Builder-&amp;gt;CreateCall(CalleeF, ArgsV, &lt;span style="color:#cd5555">&amp;#34;calltmp&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Builder-&amp;gt;SetInsertPoint(BB);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Builder-&amp;gt;CreateRet(RetVal);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="3">
&lt;li>Create functions and basic blocks:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>Function *F = Function::Create(FT, Function::ExternalLinkage, Name, TheModule.get());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>BasicBlock *BB = BasicBlock::Create(*TheContext, &lt;span style="color:#cd5555">&amp;#34;entry&amp;#34;&lt;/span>, F);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Lastly, we can print the IR using the &lt;code>TheModule&lt;/code> object:&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>TheModule-&amp;gt;print(errs(), &lt;span style="color:#8b008b;font-weight:bold">nullptr&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="optimization-passes">Optimization Passes&lt;/h1>
&lt;p>The LLVM uses FunctionPassManager to manage the optimization passes. You can many built-in passes and create custom passes.&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">// Create a new pass manager attached to it.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span> TheFPM = std::make_unique&amp;lt;legacy::FunctionPassManager&amp;gt;(TheModule.get());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#228b22">// Do simple &amp;#34;peephole&amp;#34; optimizations and bit-twiddling optzns.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span> TheFPM-&amp;gt;add(createInstructionCombiningPass());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#228b22">// Reassociate expressions.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span> TheFPM-&amp;gt;add(createReassociatePass());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#228b22">// Eliminate Common SubExpressions.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span> TheFPM-&amp;gt;add(createGVNPass());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#228b22">// Simplify the control flow graph (deleting unreachable blocks, etc).
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span> TheFPM-&amp;gt;add(createCFGSimplificationPass());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> TheFPM-&amp;gt;doInitialization();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#228b22">// Generate the IR
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#228b22">// Optimize the function.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span> TheFPM-&amp;gt;run(*TheFunction);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>LLVM has a large number of passes. You can find the list &lt;a href="https://llvm.org/docs/Passes.html">here&lt;/a>.&lt;/p>
&lt;h1 id="jit-compilation">JIT Compilation&lt;/h1>
&lt;p>To use the JIT compiler, it is necessary to initialize:&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span> InitializeNativeTarget();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> InitializeNativeTargetAsmPrinter();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> InitializeNativeTargetAsmParser();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Then set the data layout in the module:&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span> TheModule-&amp;gt;setDataLayout(TheJIT-&amp;gt;getTargetMachine().createDataLayout());
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Then we can use the JIT compiler to compile the module:&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8b008b;font-weight:bold">auto&lt;/span> H = TheJIT-&amp;gt;addModule(std::move(TheModule));
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Then generate the &lt;code>TreadSafeModule&lt;/code> and add to the JIT.&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8b008b;font-weight:bold">auto&lt;/span> TSM = llvm::orc::ThreadSafeModule(std::move(TheModule), std::move(Context));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8b008b;font-weight:bold">auto&lt;/span> H = TheJIT-&amp;gt;addModule(std::move(TSM));
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Lastly, get the function pointer of the top-level function and call it:&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8b008b;font-weight:bold">auto&lt;/span> ExprSymbol = TheJIT-&amp;gt;lookup(&lt;span style="color:#cd5555">&amp;#34;__anon_expr&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> assert(ExprSymbol &amp;amp;&amp;amp; &lt;span style="color:#cd5555">&amp;#34;Function not found&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00688b;font-weight:bold">double&lt;/span> (*FP)() = (&lt;span style="color:#00688b;font-weight:bold">double&lt;/span> (*)())(intptr_t)cantFail(ExprSymbol.getAddress());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fprintf(stderr, &lt;span style="color:#cd5555">&amp;#34;Evaluated to %f&lt;/span>&lt;span style="color:#cd5555">\n&lt;/span>&lt;span style="color:#cd5555">&amp;#34;&lt;/span>, FP());
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>- https://aspcompiler.github.io/posts/llvm-for-the-impatient-2/ - 2023 Li Chen</description></item><item><title>LLVM for the impatient (1)</title><link>https://aspcompiler.github.io/posts/llvm-for-the-impatient-1/</link><pubDate>Sat, 04 Feb 2023 14:42:43 -0800</pubDate><guid>https://aspcompiler.github.io/posts/llvm-for-the-impatient-1/</guid><description>Li Chen's blog https://aspcompiler.github.io/posts/llvm-for-the-impatient-1/ -&lt;h1 id="intro">Intro&lt;/h1>
&lt;p>LLVM is a common compiler backend. If you are writing a new language, you just need to target the LLVM backend. Then you will be able to use all the great optimization passes and target all the platforms that LLVM supports.&lt;/p>
&lt;p>A best way to get started with LLVM is by following the &lt;a href="https://llvm.org/docs/tutorial/MyFirstLanguageFrontend/index.html">tutorial&lt;/a>. The intended audience for this
series is:&lt;/p>
&lt;ol>
&lt;li>Those who are learning from the tutorial but sometimes lost in the details. Many learners of LLVM are already familiar with basic concepts like parser, optimizers
and code generation. So I tried to bring out the most important points just about LLVM and thus focus in learning through the tutorial.&lt;/li>
&lt;li>Those who work with LLVM occasionally and need a quick refresher (like me). Or sometimes when I need to a template to put together a POC.&lt;/li>
&lt;/ol>
&lt;p>I highly value the experimental approach to learn anything. So some important tips are:&lt;/p>
&lt;ol>
&lt;li>The tutorial instructs us to build LLVM from the source. However, it takes hours to build LLVM so a much faster way is just to download the prebuilt binaries.&lt;/li>
&lt;li>The LLVM API does change and the tutorials are often quickly updated from the &lt;code>main&lt;/code>. To work with the source code, get the version compatible with the binary
from the source code &lt;a href="https://github.com/llvm/llvm-project/tree/main/llvm/examples/Kaleidoscope">branch&lt;/a>.&lt;/li>
&lt;li>Many compilers can emit LLVM IR. For example, &lt;a href="https://clang.llvm.org/">Clang&lt;/a> can emit LLVM IR with the &lt;code>-emit-llvm&lt;/code> flag. Rust can emit LLVM IR with &lt;code>--emit=llvm-ir&lt;/code>. This is a great way to learn LLVM IR.&lt;/li>
&lt;li>LLVM has some great tools such as &lt;code>llvm-as&lt;/code>, &lt;code>opt&lt;/code> and &lt;code>llvm-dis&lt;/code> can be used to experiment with optimizer and visualize LLVM.&lt;/li>
&lt;/ol>
&lt;h1 id="getting-the-llvm-binaries">Getting the LLVM binaries&lt;/h1>
&lt;p>The &lt;a href="https://releases.llvm.org/download.html">LLVM download page&lt;/a> provides prebuilt binaries for a variety of operating systems and CPU architectures. On Linux or MacOS, we can download &lt;code>clang+llvm*&lt;/code> for our platform. For Windows, download &lt;code>llvm*-win64.exe&lt;/code>. If the download is a compressed archive, just expand into any directory.&lt;/p>
&lt;p>On some platforms, it is possible package manager. For example, on macOS, we can install it with &lt;a href="https://formulae.brew.sh/formula/llvm">Homebrew&lt;/a>.&lt;/p>
&lt;p>The installers/package managers usually do not add Clang/LLVM to PATH and that is fine. It is likely we will need to work with multiple versions of LLVM. Some OS, such as macOS, has a system Clang, so we do not want to override it. I strongly recommend that we add Clang/LLVM in terminal sessions when we need them.&lt;/p>
&lt;h1 id="add-clangllvm-to-path">Add Clang/LLVM to path&lt;/h1>
&lt;p>To add LLVM to path, just run:&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#658b00">export&lt;/span> &lt;span style="color:#00688b">PATH&lt;/span>=PATH_TO_LLVM/bin:&lt;span style="color:#00688b">$PATH&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>If we install LLVM on macOS with Brew, we can run&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#658b00">export&lt;/span> &lt;span style="color:#00688b">PATH&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">$(&lt;/span>brew --prefix llvm&lt;span style="color:#8b008b;font-weight:bold">)&lt;/span>&lt;span style="color:#cd5555">/bin:&lt;/span>&lt;span style="color:#00688b">$PATH&lt;/span>&lt;span style="color:#cd5555">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="other-environment-variables">Other environment variables&lt;/h1>
&lt;p>To build C++ with LLVM libraries, we can configure the LDFLAGS environment variable to point to the libraries. This can be done with:&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#658b00">export&lt;/span> &lt;span style="color:#00688b">LDFLAGS&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;-LPATH_TO_LLVM/lib&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Or with Brew installed LLVM:&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#658b00">export&lt;/span> &lt;span style="color:#00688b">LDFLAGS&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;-L&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">$(&lt;/span>brew --prefix llvm&lt;span style="color:#8b008b;font-weight:bold">)&lt;/span>&lt;span style="color:#cd5555">/lib&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Alternatively, we can also use the &lt;code>llvm-config&lt;/code> utility that comes with LLVM:&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>clang++ &lt;span style="color:#cd5555">`&lt;/span>llvm-config --cxxflags&lt;span style="color:#cd5555">`&lt;/span> my_source.cpp
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="building-llvm-tutorial-code">Building LLVM tutorial code&lt;/h1>
&lt;p>Once setting up, we can now build our first LLVM source code. Let us save the &lt;a href="https://llvm.org/docs/tutorial/MyFirstLanguageFrontend/LangImpl02.html#full-code-listing">tutorial code&lt;/a> into a file, said, &lt;code>toy.cpp&lt;/code>. Assuming Clang is already in the path, we can run:&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22"># Compile&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>clang++ -g -O3 toy.cpp &lt;span style="color:#cd5555">`&lt;/span>llvm-config --cxxflags&lt;span style="color:#cd5555">`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22"># Run&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>./a.out
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Here -g means to generate debug symbol and -O3 is &lt;a href="https://clang.llvm.org/docs/CommandGuide/clang.html">optimization level 3&lt;/a>.
We can now run Kaleidoscope Read-Eval-Print Loop (REPL):&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ ./a.out
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ready&amp;gt; def foo(x y) x+foo(y, 4.0);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Parsed a &lt;span style="color:#8b008b;font-weight:bold">function&lt;/span> definition.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ready&amp;gt; def foo(x y) x+y y;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Parsed a &lt;span style="color:#8b008b;font-weight:bold">function&lt;/span> definition.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Parsed a top-level expr
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ready&amp;gt; def foo(x y) x+y );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Parsed a &lt;span style="color:#8b008b;font-weight:bold">function&lt;/span> definition.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Error: unknown token when expecting an expression
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ready&amp;gt; extern sin(a);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ready&amp;gt; Parsed an extern
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ready&amp;gt; ^D
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The first 2 chapters of &lt;a href="https://llvm.org/docs/tutorial/MyFirstLanguageFrontend/index.html">LLVM tutorial&lt;/a> are relatively straigh-forward. You should read through them if you are not already familiar with the material.&lt;/p>
&lt;h1 id="summary">Summary&lt;/h1>
&lt;p>In the first blog post of this series, we walk through how to compile and run the first LLVM tutorial.&lt;/p>
- https://aspcompiler.github.io/posts/llvm-for-the-impatient-1/ - 2023 Li Chen</description></item><item><title>The Remaking of My Blog with Hugo</title><link>https://aspcompiler.github.io/posts/remaking-of-my-blog/</link><pubDate>Sat, 28 Jan 2023 22:16:35 -0800</pubDate><guid>https://aspcompiler.github.io/posts/remaking-of-my-blog/</guid><description>Li Chen's blog https://aspcompiler.github.io/posts/remaking-of-my-blog/ -&lt;h1 id="the-remaking">The remaking&lt;/h1>
&lt;p>I have not blogged since I joined Amazon in 2016. My initial focus was &lt;a href="https://www.amazon.jobs/content/en/our-workplace/leadership-principles">delivery results&lt;/a> and then I had to deal with a massive volume of customer interactions and data as the result. Now I want to blog again as I spend significant time doing R&amp;amp;D at AWS Center for Quantum Computing and I need to capture what I learnt, and hopefully that benefits others as well. My original blog site was developed on &lt;a href="https://docs.github.com/en/pages/setting-up-a-github-pages-site-with-jekyll">github pages using Jekyll&lt;/a>. The Jekyll has changed significantly so that the side will not build.&lt;/p>
&lt;h1 id="the-first-attempt-updating-jekyll">The first attempt: updating Jekyll&lt;/h1>
&lt;p>Updating Jekyll has not been a smooth ride. Jekyll is developed in &lt;a href="https://www.ruby-lang.org/en/">Ruby&lt;/a>. The latest version of Ruby is currently 3.2 but github pages is only compatible with 3.1.3. So one actually has to start with a Ruby version manager such as &lt;a href="https://jekyllrb.com/docs/installation/macos/">chruby&lt;/a> to have multiple versions of Ruby in a system. Then one has to install Ruby Gems into per project environment using &lt;a href="https://jekyllrb.com/docs/ruby-101/">bundler&lt;/a>. Then once every few months, I need to update my Gems and ensure that they are compatible with each other. That is a bit too much maintenance if I just need a tool to write a blog.&lt;/p>
&lt;h1 id="trying-hugo">Trying Hugo&lt;/h1>
&lt;p>&lt;a href="https://gohugo.io/">Hugo&lt;/a> is another popular static site generator written in &lt;a href="https://go.dev/">Go&lt;/a>. Hugo developers have resolved all dependency conflicts at build time to make it a single executable so that the installation is extremely easy.&lt;/p>
&lt;p>Hugo deploys hugo modules as git submodules so &lt;a href="https://git-scm.com/">git&lt;/a> is required. This is a bit harsh for non-software-developers but OK for me. Using git submodules for distributing/versioning dependencies definitely is not as easy as versioned packages. However, I have only one submodule which is my &lt;a href="https://github.com/AmazingRise/hugo-theme-diary">Dairy theme&lt;/a> which has more features than I currently need. Let us see how it goes.&lt;/p>
&lt;h1 id="getting-started">Getting Started&lt;/h1>
&lt;p>The installation is very straight-forward. Just follow the &lt;a href="https://gohugo.io/categories/installation/">instructions for each platform&lt;/a>.&lt;/p>
&lt;p>Then one can just follow &lt;a href="https://gohugo.io/getting-started/quick-start/">quick start&lt;/a>. When I get to the step of adding &lt;code>ananke&lt;/code> theme, I jumped to the &lt;a href="https://github.com/AmazingRise/hugo-theme-diary#quick-start">Dairy theme instructions&lt;/a> instead. Expand the section under &lt;code>Quick Start&lt;/code> to find the instructions.&lt;/p>
&lt;h1 id="adding-contents">Adding Contents&lt;/h1>
&lt;p>To add a new post, type:&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>hugo new posts/my-first-post.md
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>You can also type:&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>hugo new posts/my-first-post/index.md
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The main difference is that the latter will create a directory for my-first-post. If the post contains images, you can add it to the same directory.&lt;/p>
&lt;p>I also added an about page:&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>hugo new about/index.md
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>To prevent the about page showing up like a blog, just locate the front matter which is a section at the beginning of the page and remove the &lt;code>date&lt;/code> entry:&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-md" data-lang="md">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>title: &amp;#34;About Me&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>draft: false
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>To build the static web site locally, run:&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>hugo server
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>To include the draft pages, run:&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>hugo server -D
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="configuration">Configuration&lt;/h1>
&lt;p>Most of the configurations are in the &lt;code>config.toml&lt;/code> file. One first needs to follow the instructions to set &lt;code>baseUrl&lt;/code>, &lt;code>title&lt;/code>, &lt;code>theme&lt;/code>, etc.&lt;/p>
&lt;h2 id="configuring-main-menu">Configuring Main Menu&lt;/h2>
&lt;p>Configuring the main menu is pretty straightforward. Just add several &lt;code>[[menu.main]]&lt;/code> elements. The double square-bracket means array in toml.&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>[[menu.main]]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>url = &lt;span style="color:#cd5555">&amp;#34;/about&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>name = &lt;span style="color:#cd5555">&amp;#34;About&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>weight = &lt;span style="color:#b452cd">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[[menu.main]]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>url = &lt;span style="color:#cd5555">&amp;#34;/posts&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>name = &lt;span style="color:#cd5555">&amp;#34;Posts&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>weight = &lt;span style="color:#b452cd">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[[menu.main]]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>url = &lt;span style="color:#cd5555">&amp;#34;/index.xml&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>name = &lt;span style="color:#cd5555">&amp;#34;RSS Feed&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>weight = &lt;span style="color:#b452cd">3&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Hugo recognizes some of the urls like &lt;code>posts&lt;/code> and &lt;code>index.xml&lt;/code> out of the box while we have to add contents for &lt;code>about&lt;/code>.&lt;/p>
&lt;h2 id="comments">Comments&lt;/h2>
&lt;p>Hugo supports several comment systems from free to paid. One of the easiest free ones is &lt;a href="https://utteranc.es/">utterance&lt;/a> which uses github issues to store comments. The configuration for utterance is:&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>[params.utterances]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>repo=&lt;span style="color:#cd5555">&amp;#34;aspcompiler/aspcompiler.github.io&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>theme=&lt;span style="color:#cd5555">&amp;#34;github-light&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="search">Search&lt;/h2>
&lt;p>One of the easiest ways to get search functionality is to configure &lt;a href="https://github.com/AmazingRise/hugo-theme-diary/wiki/Customization#add-google-search-box-on-your-site">google search&lt;/a>.&lt;/p>
&lt;h2 id="syntax-highlighter">Syntax Highlighter&lt;/h2>
&lt;p>Dairy theme has a default &lt;a href="https://github.com/AmazingRise/hugo-theme-diary/wiki/Customization#about-highlight">code highlighter&lt;/a> and we will see how it goes.&lt;/p>
&lt;h2 id="cicd">CI/CD&lt;/h2>
&lt;p>To deploy to &lt;code>site.github.io&lt;/code>, one has to configure github action to build the site. This is basically adding and config the page &lt;code>.github/workflows/gh-pages.yml&lt;/code>. Follow the &lt;a href="https://gohugo.io/hosting-and-deployment/hosting-on-github/">instructions&lt;/a> from Hugo. In &lt;code>gh-pages.yml&lt;/code>, uncomment the line that says &lt;code>extended: true&lt;/code>. After the github action runs successfully, go to github Settings -&amp;gt; Pages, under the &lt;code>Build and deployment&lt;/code> section, change the branch to &lt;code>gh-pages&lt;/code>. Then the pages should deploy to https://&amp;lt;USERNAME|ORGANIZATION&amp;gt;.github.io/.&lt;/p>
&lt;h2 id="trying-this-site">Trying this site&lt;/h2>
&lt;p>To try this site locally, follow the instructions above to install &lt;code>Hugo&lt;/code> and its prerequisites. Then clone the projects:&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git clone --recurse-submodules https://github.com/aspcompiler/aspcompiler.github.io.git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#658b00">cd&lt;/span> aspcompiler.github.io
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hugo server
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>If the site is cloned with the &lt;code>--recurse-submodules&lt;/code> argument, run the following after the fact:&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git submodule update --init --recursive
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>- https://aspcompiler.github.io/posts/remaking-of-my-blog/ - 2023 Li Chen</description></item></channel></rss>