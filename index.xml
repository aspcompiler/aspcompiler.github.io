<?xml-stylesheet href="/rss.xsl" type="text/xsl"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Li Chen's blog</title><link>https://aspcompiler.github.io/</link><description>Recent content on Li Chen's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>2023 Li Chen</copyright><lastBuildDate>Mon, 04 Sep 2023 08:09:34 -0700</lastBuildDate><atom:link href="https://aspcompiler.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Is Rust a Good Language for Machine Learning</title><link>https://aspcompiler.github.io/posts/rust-machine-learning/</link><pubDate>Mon, 04 Sep 2023 08:09:34 -0700</pubDate><guid>https://aspcompiler.github.io/posts/rust-machine-learning/</guid><description>Li Chen's blog https://aspcompiler.github.io/posts/rust-machine-learning/ -&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>Rust has been known for its performance and memory/thread safety. However, it takes an ecosystem to be successful. So far, Rust has found
a lot of success in network programming and bit coin mining. Rust has an excellent support for &lt;code>async&lt;/code> making it a great language any time
we need distributed systems.&lt;/p>
&lt;p>For the reason, Rust has found a lot of success in vector databases.&lt;/p>
&lt;h1 id="vector-databases">Vector Databases&lt;/h1>
&lt;p>There are several start-up companies that are building vector databases using Rust: &lt;a href="https://www.pinecone.io/blog/rust-rewrite/">Pinecone&lt;/a>,
&lt;a href="https://github.com/qdrant/qdrant">Qdrant&lt;/a> and &lt;a href="https://fennel.ai/blog/vector-search-in-200-lines-of-rust/">Fennel.ai&lt;/a>.&lt;/p>
&lt;h2 id="const-generics">Const generics&lt;/h2>
&lt;p>Rust has an interesting feature called &lt;a href="https://doc.rust-lang.org/reference/items/generics.html">const generics&lt;/a> that is uniquely suitable for vector databases. Const generics are generic arguments that range over constant values, rather than types or lifetimes. This allows, for instance, types to be parameterized by integers. The follow are some examples of const generics:&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">// Examples where const generic parameters can be used.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#228b22">// Used in the signature of the item itself.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">fn&lt;/span> &lt;span style="color:#008b45">foo&lt;/span>&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">const&lt;/span>&lt;span style="color:#bbb"> &lt;/span>N: &lt;span style="color:#00688b;font-weight:bold">usize&lt;/span>&amp;gt;(arr: [&lt;span style="color:#00688b;font-weight:bold">i32&lt;/span>;&lt;span style="color:#bbb"> &lt;/span>N])&lt;span style="color:#bbb"> &lt;/span>{&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#228b22">// Used as a type within a function body.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">let&lt;/span>&lt;span style="color:#bbb"> &lt;/span>x: [&lt;span style="color:#00688b;font-weight:bold">i32&lt;/span>;&lt;span style="color:#bbb"> &lt;/span>N];&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#228b22">// Used as an expression.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span>&lt;span style="color:#bbb"> &lt;/span>println!(&lt;span style="color:#cd5555">&amp;#34;{}&amp;#34;&lt;/span>,&lt;span style="color:#bbb"> &lt;/span>N&lt;span style="color:#bbb"> &lt;/span>*&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#b452cd">2&lt;/span>);&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">&lt;/span>}&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#228b22">// Used as a field of a struct.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">struct&lt;/span> &lt;span style="color:#008b45;font-weight:bold">Foo&lt;/span>&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">const&lt;/span>&lt;span style="color:#bbb"> &lt;/span>N: &lt;span style="color:#00688b;font-weight:bold">usize&lt;/span>&amp;gt;([&lt;span style="color:#00688b;font-weight:bold">i32&lt;/span>;&lt;span style="color:#bbb"> &lt;/span>N]);&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">impl&lt;/span>&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">const&lt;/span>&lt;span style="color:#bbb"> &lt;/span>N: &lt;span style="color:#00688b;font-weight:bold">usize&lt;/span>&amp;gt;&lt;span style="color:#bbb"> &lt;/span>Foo&amp;lt;N&amp;gt;&lt;span style="color:#bbb"> &lt;/span>{&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#228b22">// Used as an associated constant.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">const&lt;/span>&lt;span style="color:#bbb"> &lt;/span>CONST: &lt;span style="color:#00688b;font-weight:bold">usize&lt;/span> =&lt;span style="color:#bbb"> &lt;/span>N&lt;span style="color:#bbb"> &lt;/span>*&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#b452cd">4&lt;/span>;&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">&lt;/span>}&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">trait&lt;/span>&lt;span style="color:#bbb"> &lt;/span>Trait&lt;span style="color:#bbb"> &lt;/span>{&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">type&lt;/span> &lt;span style="color:#008b45;font-weight:bold">Output&lt;/span>;&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">&lt;/span>}&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">impl&lt;/span>&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">const&lt;/span>&lt;span style="color:#bbb"> &lt;/span>N: &lt;span style="color:#00688b;font-weight:bold">usize&lt;/span>&amp;gt;&lt;span style="color:#bbb"> &lt;/span>Trait&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">for&lt;/span>&lt;span style="color:#bbb"> &lt;/span>Foo&amp;lt;N&amp;gt;&lt;span style="color:#bbb"> &lt;/span>{&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#228b22">// Used as an associated type.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">type&lt;/span> &lt;span style="color:#008b45;font-weight:bold">Output&lt;/span>&lt;span style="color:#bbb"> &lt;/span>=&lt;span style="color:#bbb"> &lt;/span>[&lt;span style="color:#00688b;font-weight:bold">i32&lt;/span>;&lt;span style="color:#bbb"> &lt;/span>N];&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">&lt;/span>}&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="frameworks">Frameworks&lt;/h1>
&lt;p>Rust has been growing in machine learning frameworks as well, for example, Hugging Face &lt;a href="https://github.com/huggingface/candle">candle&lt;/a> and &lt;a href="https://github.com/burn-rs/burn">burn-rs&lt;/a>. Each of these frameworks can only run some models. For example, for &lt;code>candle&lt;/code>, &lt;a href="https://huggingface.co/spaces/lmz/candle-whisper">candle-whisper&lt;/a> and &lt;a href="https://huggingface.co/spaces/lmz/candle-llama2">candle-llama2&lt;/a> and for &lt;code>burn&lt;/code>, &lt;a href="https://github.com/Gadersd/whisper-burn">whisper-burn&lt;/a> and &lt;a href="https://github.com/Gadersd/llama2-burn">llama2-burn&lt;/a>.&lt;/p>
&lt;p>These frameworks can work in spacial cases where frameworks like &lt;code>PyTorch&lt;/code> are too large. For example, Candle&amp;rsquo;s core goal is to make &lt;code>serverless inference&lt;/code> possible.&lt;/p>
&lt;p>This frameworks gave proof that Rust is a viable language for machine learning. They also built-up an ecosystem of Rust libraries that could be very useful for other Rust projects, for example, &lt;a href="https://github.com/LaurentMazare/tch-rs">tch-rs&lt;/a>. Hugging Face also has &lt;a href="https://github.com/huggingface?q=&amp;amp;type=all&amp;amp;language=rust&amp;amp;sort=">several tools developed in Rust&lt;/a>.&lt;/p>
&lt;h1 id="references">References&lt;/h1>
&lt;p>I have only touched a small part of machine learning in Rust. For more comprehensive reviews, please check out the following references:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.arewelearningyet.com/">Are we learning yet&lt;/a>&lt;/li>
&lt;li>&lt;a href="Awesome-Rust-MachineLearning">Awesome-Rust-MachineLearning&lt;/a>&lt;/li>
&lt;/ul>
- https://aspcompiler.github.io/posts/rust-machine-learning/ - 2023 Li Chen</description></item><item><title>Practical Rust Ownership</title><link>https://aspcompiler.github.io/posts/practical-rust-ownership/</link><pubDate>Sat, 19 Aug 2023 10:32:41 -0700</pubDate><guid>https://aspcompiler.github.io/posts/practical-rust-ownership/</guid><description>Li Chen's blog https://aspcompiler.github.io/posts/practical-rust-ownership/ -&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>Rust &lt;code>ownership&lt;/code> is often listed as &lt;a href="https://opensource.googleblog.com/2023/06/rust-fact-vs-fiction-5-insights-from-googles-rust-journey-2022.html">one of the top challenging areas&lt;/a> of Rust. Contributing to this challenge is that the practical perspective
of the Rust ownership is spread across many chapters the &lt;a href="https://doc.rust-lang.org/book/ch04-01-what-is-ownership.html">Rust book&lt;/a>. In this post,
I will attempt to work through Rust ownership in a practical perspective.&lt;/p>
&lt;p>I do not intend this post to be an introduction material that cover every details. Instead, I intend this to be a guide that points to various Rust book chapters.&lt;/p>
&lt;h1 id="stack-and-heap">Stack and Heap&lt;/h1>
&lt;p>Like many other languages, Rust can allocate memory on a stack or a heap. Like C/C++, and unlike languages with garbage collection like Java or C#,
Rust developers often prefer to allocate memory on a stack. The reason is that stack allocation is faster and deallocation does not cause memory fragmentation.
The first think to keep in mind is that variable allocated on a stack cannot outlive the function that allocated it.&lt;/p>
&lt;p>Question: When we create a variable, how do we know if it is allocated on a stack or a heap?&lt;/p>
&lt;p>Answer: It depends on types. Scalar Types are allocated on a stack. Fix-sized Compound Types such as arrays, tuples and structs
are also allocated on a stack if they only have fix-sized members. Growable types such as &lt;code>String&lt;/code> and &lt;code>Vec&lt;/code> are allocated on a heap.
To explicitly allocate on a heap a type that otherwise would be allocated on a stack, we can use &lt;a href="https://doc.rust-lang.org/book/ch15-01-box.html?highlight=box#enabling-recursive-types-with-boxes">&lt;code>Box&lt;/code> type&lt;/a>.&lt;/p>
&lt;p>See The Stack and the Heap section in the &lt;a href="https://doc.rust-lang.org/book/ch04-01-what-is-ownership.html#the-stack-and-the-heap">Rust book&lt;/a>. Also see the &lt;a href="https://doc.rust-lang.org/book/ch03-02-data-types.html">Data Types&lt;/a> chapter.&lt;/p>
&lt;h1 id="ownership">Ownership&lt;/h1>
&lt;p>The Rust ownership rule is fairly straight forward:&lt;/p>
&lt;ul>
&lt;li>Each value in Rust has an owner.&lt;/li>
&lt;li>There can only be one owner at a time.&lt;/li>
&lt;li>When the owner goes out of scope, the value will be dropped.&lt;/li>
&lt;/ul>
&lt;p>Question: when we assign a variable to another variable or when we pass a variable to a function, does the ownership transfer?&lt;/p>
&lt;p>Answer: it depends on the type. If the type implements the &lt;code>Copy&lt;/code> trait, the value will be copied. We sometimes call these types &lt;code>copy&lt;/code>. Otherwise, the ownership
transfers and we call it &lt;code>move&lt;/code>.&lt;/p>
&lt;p>See the &lt;a href="https://doc.rust-lang.org/book/ch04-01-what-is-ownership">Ownership&lt;/a> chapter for more details.&lt;/p>
&lt;h1 id="references">References&lt;/h1>
&lt;p>It would be very inconvenient if we always have to copy or move variables when we pass them to a function. Rust has another mechanism called &lt;code>reference&lt;/code> or &lt;code>borrowing&lt;/code>. Reference is like a pointer. Rust has the following rules for references:&lt;/p>
&lt;ul>
&lt;li>At any given time, you can have either one mutable reference or any number of immutable references.&lt;/li>
&lt;li>References must always be valid.&lt;/li>
&lt;/ul>
&lt;p>Question: Does the following code compile?&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8b008b;font-weight:bold">fn&lt;/span> &lt;span style="color:#008b45">main&lt;/span>()&lt;span style="color:#bbb"> &lt;/span>{&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">let&lt;/span>&lt;span style="color:#bbb"> &lt;/span>len&lt;span style="color:#bbb"> &lt;/span>=&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#658b00">String&lt;/span>::from(&lt;span style="color:#cd5555">&amp;#34;hello&amp;#34;&lt;/span>).len();&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>println!(&lt;span style="color:#cd5555">&amp;#34;The length is {}.&amp;#34;&lt;/span>,&lt;span style="color:#bbb"> &lt;/span>len);&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">&lt;/span>}&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The answer is yes. During method chaining, Rust can create a temporary ownership without requiring us to explicitly create a owning variable.&lt;/p>
&lt;p>See the &lt;a href="https://doc.rust-lang.org/book/ch04-02-references-and-borrowing.html">References and Borrowing&lt;/a> chapter for more details.&lt;/p>
&lt;h1 id="the-slice-type">The Slice Type&lt;/h1>
&lt;p>Slices let you reference a contiguous sequence of elements in a collection rather than the whole collection. We usually see slices in String or arrays.&lt;/p>
&lt;p>Question: If we design a function, how do we decide whether to pass parameter by moving, or borrowing or slicing? How about return type?&lt;/p>
&lt;p>Answer:&lt;/p>
&lt;ol>
&lt;li>For passing parameter, consider reference first unless moving ownership is the right thing to do (e.g., &lt;code>setValues&lt;/code>). Use ```mut T` if the function needs to mutate the parameter.&lt;/li>
&lt;li>If the type supports slicing, consider using slice as the parameter type or return type first.&lt;/li>
&lt;li>For return type, move ownership if the function creates a new value.&lt;/li>
&lt;li>If the function receives parameters by reference and returns a reference, check the &lt;code>lifetime&lt;/code>.&lt;/li>
&lt;/ol>
&lt;p>See the &lt;a href="https://doc.rust-lang.org/book/ch04-03-slices.html">Slices&lt;/a> chapter for more details.&lt;/p>
&lt;h1 id="lifetime">Lifetime&lt;/h1>
&lt;p>In the previous section, we mentioned &lt;code>lifetime&lt;/code>. Lifetime is a mechanism to ensure that references are valid as long as we need them to be.&lt;/p>
&lt;p>An example of lifetime is the following code:&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8b008b;font-weight:bold">fn&lt;/span> &lt;span style="color:#008b45">longest&lt;/span>&amp;lt;&amp;#39;&lt;span style="color:#658b00">a&lt;/span>&amp;gt;(x: &lt;span style="color:#8b008b;font-weight:bold">&amp;amp;&lt;/span>&amp;#39;&lt;span style="color:#658b00">a&lt;/span> &lt;span style="color:#00688b;font-weight:bold">str&lt;/span>,&lt;span style="color:#bbb"> &lt;/span>y: &lt;span style="color:#8b008b;font-weight:bold">&amp;amp;&lt;/span>&amp;#39;&lt;span style="color:#658b00">a&lt;/span> &lt;span style="color:#00688b;font-weight:bold">str&lt;/span>)&lt;span style="color:#bbb"> &lt;/span>-&amp;gt; &lt;span style="color:#8b008b;font-weight:bold">&amp;amp;&lt;/span>&amp;#39;&lt;span style="color:#658b00">a&lt;/span> &lt;span style="color:#00688b;font-weight:bold">str&lt;/span> {&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span>&lt;span style="color:#bbb"> &lt;/span>x.len()&lt;span style="color:#bbb"> &lt;/span>&amp;gt;&lt;span style="color:#bbb"> &lt;/span>y.len()&lt;span style="color:#bbb"> &lt;/span>{&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>x&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>}&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">else&lt;/span>&lt;span style="color:#bbb"> &lt;/span>{&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>y&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>}&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">&lt;/span>}&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Since the compiler cannot determine whether x or y will be returned, we need to tell the compiler that &lt;code>x&lt;/code> and &lt;code>y&lt;/code> needs to be valid. Sometimes, a function
compiles without lifetime annotations. This is called called &lt;a href="https://doc.rust-lang.org/book/ch10-03-lifetime-syntax.html#lifetime-elision">lifetime elision&lt;/a>.&lt;/p>
&lt;h1 id="box-rc-and-refcell">Box, Rc and RefCell&lt;/h1>
&lt;p>Earlier, we mentioned that &lt;code>Box&lt;/code> is a type that allocates on a heap. &lt;code>Box&lt;/code> is a single ownership start pointer. In contrast, &lt;code>Rc&lt;/code> is a &lt;a href="https://doc.rust-lang.org/book/ch15-04-rc.html">reference counted
smart pointer&lt;/a>. &lt;code>RefCell&lt;/code> is a mechanism allows you to mutate data even when there are immutable references
to that data. This is called &lt;a href="https://doc.rust-lang.org/book/ch15-05-interior-mutability.html">interior mutability&lt;/a>. The borrowing rules are enforced at runtime.&lt;/p>
&lt;h1 id="ownership-and-threads">Ownership and Threads&lt;/h1>
&lt;p>&lt;code>Rc&lt;/code> cannot be shared across threads. To share data across threads, we need to use &lt;code>Arc&lt;/code> which is an atomic reference count type. &lt;code>Arc&lt;/code> is often used together
with &lt;code>Mutex&lt;/code> to synchronize access to data. For example:&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8b008b;font-weight:bold">let&lt;/span>&lt;span style="color:#bbb"> &lt;/span>counter&lt;span style="color:#bbb"> &lt;/span>=&lt;span style="color:#bbb"> &lt;/span>Arc::new(Mutex::new(&lt;span style="color:#b452cd">0&lt;/span>));&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#228b22">// To use
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">let&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">mut&lt;/span>&lt;span style="color:#bbb"> &lt;/span>num&lt;span style="color:#bbb"> &lt;/span>=&lt;span style="color:#bbb"> &lt;/span>counter.lock().unwrap();&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">&lt;/span>*num&lt;span style="color:#bbb"> &lt;/span>+=&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#b452cd">1&lt;/span>;&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>See the &lt;a href="https://doc.rust-lang.org/book/ch16-00-concurrency.html">Concurrency&lt;/a> chapter for more details.&lt;/p>
&lt;p>Lastly, the type that can be transferred across threads is called &lt;code>Send&lt;/code>. The type that can be shared across threads is called &lt;code>Sync&lt;/code>. See the &lt;a href="https://doc.rust-lang.org/book/ch16-02-message-passing.html#sending-multiple-messages">Send and Sync&lt;/a> chapter for more details.&lt;/p>
&lt;h1 id="final-thoughts">Final Thoughts&lt;/h1>
&lt;p>To put the knowledge together, let&amp;rsquo;s ask the following question: should a &lt;code>struct&lt;/code> owns its members?&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8b008b;font-weight:bold">struct&lt;/span> &lt;span style="color:#008b45;font-weight:bold">User&lt;/span>&lt;span style="color:#bbb"> &lt;/span>{&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>id: &lt;span style="color:#00688b;font-weight:bold">u32&lt;/span>,&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>name: &lt;span style="color:#658b00">String&lt;/span>,&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>screen_name: &lt;span style="color:#658b00">String&lt;/span>,&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>location: &lt;span style="color:#658b00">String&lt;/span>,&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">&lt;/span>}&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>or&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8b008b;font-weight:bold">struct&lt;/span> &lt;span style="color:#008b45;font-weight:bold">User&lt;/span>&amp;lt;&amp;#39;&lt;span style="color:#658b00">a&lt;/span>&amp;gt;&lt;span style="color:#bbb"> &lt;/span>{&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>id: &lt;span style="color:#00688b;font-weight:bold">u32&lt;/span>,&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>name: &lt;span style="color:#8b008b;font-weight:bold">&amp;amp;&lt;/span>&amp;#39;&lt;span style="color:#658b00">a&lt;/span> &lt;span style="color:#00688b;font-weight:bold">str&lt;/span>,&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>screen_name: &lt;span style="color:#8b008b;font-weight:bold">&amp;amp;&lt;/span>&amp;#39;&lt;span style="color:#658b00">a&lt;/span> &lt;span style="color:#00688b;font-weight:bold">str&lt;/span>,&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>location: &lt;span style="color:#8b008b;font-weight:bold">&amp;amp;&lt;/span>&amp;#39;&lt;span style="color:#658b00">a&lt;/span> &lt;span style="color:#00688b;font-weight:bold">str&lt;/span>,&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">&lt;/span>}&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Generally, we prefer to keep everything in the same place. However, the first struct is fairly rigid: we have to construct the struct at once and we cannot move ownership out of the struct. The stepwise construction is needed or if we need to move ownership out of the struct, we need to use &lt;code>Option&lt;/code>.&lt;/p>
&lt;p>The second struct is useful when the data is already owned by a buffer. See zero-copy in &lt;a href="https://serde.rs/lifetimes.html">serde&lt;/a>.&lt;/p>
&lt;h1 id="summary">Summary&lt;/h1>
&lt;p>We took a lap around Rust ownership. We pointed to various chapters in the Rust book. We also discussed some practical considerations when designing a function or a struct.&lt;/p>
- https://aspcompiler.github.io/posts/practical-rust-ownership/ - 2023 Li Chen</description></item><item><title>A First Look of PyO3</title><link>https://aspcompiler.github.io/posts/a-first-look-of-pyo3/</link><pubDate>Sat, 29 Jul 2023 22:33:22 -0700</pubDate><guid>https://aspcompiler.github.io/posts/a-first-look-of-pyo3/</guid><description>Li Chen's blog https://aspcompiler.github.io/posts/a-first-look-of-pyo3/ -&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>&lt;a href="https://pyo3.rs/main/">PyO3&lt;/a> is a Rust library for building Python bindings. In this post, we will
try to build a simple Python module with a few features using PyO3. For exhaustive documentation,
please refer to the &lt;a href="https://pyo3.rs/main/">PyO3 user guide&lt;/a>.&lt;/p>
&lt;h1 id="setup">Setup&lt;/h1>
&lt;p>To learn how to setup PyO3, please follow the &lt;a href="https://pyo3.rs/main/">PyO3 user guide&lt;/a>. I have
save my code in &lt;a href="https://github.com/aspcompiler/pyo3-test">this repository&lt;/a>. Please follow the
README there to run my code.&lt;/p>
&lt;h1 id="a-simple-python-module">A Simple Python Module&lt;/h1>
&lt;p>Let us implement a single Python function in Rust.&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8b008b;font-weight:bold">use&lt;/span>&lt;span style="color:#bbb"> &lt;/span>pyo3::prelude::*;&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#1e889b">#[pyfunction]&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">fn&lt;/span> &lt;span style="color:#008b45">sum_as_string&lt;/span>(a: &lt;span style="color:#00688b;font-weight:bold">usize&lt;/span>,&lt;span style="color:#bbb"> &lt;/span>b: &lt;span style="color:#00688b;font-weight:bold">usize&lt;/span>)&lt;span style="color:#bbb"> &lt;/span>-&amp;gt; &lt;span style="color:#008b45;font-weight:bold">PyResult&lt;/span>&amp;lt;&lt;span style="color:#658b00">String&lt;/span>&amp;gt;&lt;span style="color:#bbb"> &lt;/span>{&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#658b00">Ok&lt;/span>((a&lt;span style="color:#bbb"> &lt;/span>+&lt;span style="color:#bbb"> &lt;/span>b).to_string())&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">&lt;/span>}&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>We can call the function with the following Python code.&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8b008b;font-weight:bold">import&lt;/span> &lt;span style="color:#008b45;text-decoration:underline">pyo3_test&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#658b00">print&lt;/span>(pyo3_test.sum_as_string(&lt;span style="color:#b452cd">3&lt;/span>, &lt;span style="color:#b452cd">5&lt;/span>))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The output is &lt;code>8&lt;/code>.&lt;/p>
&lt;h1 id="a-python-class">A Python Class&lt;/h1>
&lt;p>Next, we will implement a Python function that returns a Python class in Rust.&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#1e889b">#[pyclass]&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">struct&lt;/span> &lt;span style="color:#008b45;font-weight:bold">MyClass&lt;/span>&lt;span style="color:#bbb"> &lt;/span>{&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#1e889b">#[pyo3(get, set)]&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>num: &lt;span style="color:#00688b;font-weight:bold">i32&lt;/span>,&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">&lt;/span>}&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#1e889b">#[pyfunction]&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">fn&lt;/span> &lt;span style="color:#008b45">return_myclass&lt;/span>()&lt;span style="color:#bbb"> &lt;/span>-&amp;gt; &lt;span style="color:#008b45;font-weight:bold">Py&lt;/span>&amp;lt;MyClass&amp;gt;&lt;span style="color:#bbb"> &lt;/span>{&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>Python::with_gil(|py|&lt;span style="color:#bbb"> &lt;/span>-&amp;gt; &lt;span style="color:#008b45;font-weight:bold">Py&lt;/span>&amp;lt;MyClass&amp;gt;&lt;span style="color:#bbb"> &lt;/span>{&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>Py::new(py,&lt;span style="color:#bbb"> &lt;/span>MyClass&lt;span style="color:#bbb"> &lt;/span>{&lt;span style="color:#bbb"> &lt;/span>num: &lt;span style="color:#b452cd">1&lt;/span>&lt;span style="color:#bbb"> &lt;/span>}).unwrap()&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>})&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">&lt;/span>}&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Note that we use Py::new() to allocate the class in Python GIL memory.&lt;/p>
&lt;p>We can use the class in Python.&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#658b00">print&lt;/span>(pyo3_test.return_myclass().num)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The output is &lt;code>1&lt;/code>.&lt;/p>
&lt;h1 id="a-python-iterator">A Python Iterator&lt;/h1>
&lt;p>Next, we will implement something very Pythonic: an iterator.&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#1e889b">#[pyclass]&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">struct&lt;/span> &lt;span style="color:#008b45;font-weight:bold">PyClassIter&lt;/span>&lt;span style="color:#bbb"> &lt;/span>{&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>count: &lt;span style="color:#00688b;font-weight:bold">usize&lt;/span>,&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">&lt;/span>}&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#1e889b">#[pymethods]&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">impl&lt;/span>&lt;span style="color:#bbb"> &lt;/span>PyClassIter&lt;span style="color:#bbb"> &lt;/span>{&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#1e889b">#[new]&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">pub&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">fn&lt;/span> &lt;span style="color:#008b45">new&lt;/span>()&lt;span style="color:#bbb"> &lt;/span>-&amp;gt; &lt;span style="color:#008b45;font-weight:bold">Self&lt;/span>&lt;span style="color:#bbb"> &lt;/span>{&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>PyClassIter&lt;span style="color:#bbb"> &lt;/span>{&lt;span style="color:#bbb"> &lt;/span>count: &lt;span style="color:#b452cd">0&lt;/span>&lt;span style="color:#bbb"> &lt;/span>}&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>}&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">fn&lt;/span> &lt;span style="color:#008b45">__iter__&lt;/span>(slf: &lt;span style="color:#008b45;font-weight:bold">PyRef&lt;/span>&amp;lt;&amp;#39;&lt;span style="color:#658b00">_&lt;/span>,&lt;span style="color:#bbb"> &lt;/span>Self&amp;gt;)&lt;span style="color:#bbb"> &lt;/span>-&amp;gt; &lt;span style="color:#008b45;font-weight:bold">PyRef&lt;/span>&amp;lt;&amp;#39;&lt;span style="color:#658b00">_&lt;/span>,&lt;span style="color:#bbb"> &lt;/span>Self&amp;gt;&lt;span style="color:#bbb"> &lt;/span>{&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>slf&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>}&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">fn&lt;/span> &lt;span style="color:#008b45">__next__&lt;/span>(&amp;amp;&lt;span style="color:#8b008b;font-weight:bold">mut&lt;/span>&lt;span style="color:#bbb"> &lt;/span>self)&lt;span style="color:#bbb"> &lt;/span>-&amp;gt; &lt;span style="color:#658b00">Option&lt;/span>&amp;lt;&lt;span style="color:#00688b;font-weight:bold">usize&lt;/span>&amp;gt;&lt;span style="color:#bbb"> &lt;/span>{&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span>&lt;span style="color:#bbb"> &lt;/span>self.count&lt;span style="color:#bbb"> &lt;/span>&amp;lt;&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#b452cd">5&lt;/span>&lt;span style="color:#bbb"> &lt;/span>{&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>self.count&lt;span style="color:#bbb"> &lt;/span>+=&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#b452cd">1&lt;/span>;&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#228b22">// Given an instance `counter`, First five `next(counter)` calls yield 1, 2, 3, 4, 5.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#228b22">&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#658b00">Some&lt;/span>(self.count)&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>}&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">else&lt;/span>&lt;span style="color:#bbb"> &lt;/span>{&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#658b00">None&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>}&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>}&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">&lt;/span>}&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>We can use the iterator in Python.&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8b008b;font-weight:bold">for&lt;/span> i &lt;span style="color:#8b008b">in&lt;/span> pyo3_test.PyClassIter():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#658b00">print&lt;/span>(i)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The output is &lt;code>1&lt;/code>, &lt;code>2&lt;/code>, &lt;code>3&lt;/code>, &lt;code>4&lt;/code>, &lt;code>5&lt;/code>.&lt;/p>
&lt;h1 id="a-python-async-iterator">A Python Async Iterator&lt;/h1>
&lt;p>Next, we want to have even more fun: an async iterator.&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#1e889b">#[pyclass]&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">struct&lt;/span> &lt;span style="color:#008b45;font-weight:bold">PyAsyncIter&lt;/span>&lt;span style="color:#bbb"> &lt;/span>{&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>count: &lt;span style="color:#008b45;font-weight:bold">Arc&lt;/span>&amp;lt;Mutex&amp;lt;&lt;span style="color:#00688b;font-weight:bold">usize&lt;/span>&amp;gt;&amp;gt;,&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">&lt;/span>}&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#1e889b">#[pymethods]&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">impl&lt;/span>&lt;span style="color:#bbb"> &lt;/span>PyAsyncIter&lt;span style="color:#bbb"> &lt;/span>{&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#1e889b">#[new]&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">pub&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">fn&lt;/span> &lt;span style="color:#008b45">new&lt;/span>()&lt;span style="color:#bbb"> &lt;/span>-&amp;gt; &lt;span style="color:#008b45;font-weight:bold">Self&lt;/span>&lt;span style="color:#bbb"> &lt;/span>{&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>PyAsyncIter&lt;span style="color:#bbb"> &lt;/span>{&lt;span style="color:#bbb"> &lt;/span>count: &lt;span style="color:#008b45;font-weight:bold">Arc&lt;/span>::new(Mutex::new(&lt;span style="color:#b452cd">0&lt;/span>))&lt;span style="color:#bbb"> &lt;/span>}&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>}&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">fn&lt;/span> &lt;span style="color:#008b45">__aiter__&lt;/span>(slf: &lt;span style="color:#008b45;font-weight:bold">PyRef&lt;/span>&amp;lt;&amp;#39;&lt;span style="color:#658b00">_&lt;/span>,&lt;span style="color:#bbb"> &lt;/span>Self&amp;gt;)&lt;span style="color:#bbb"> &lt;/span>-&amp;gt; &lt;span style="color:#008b45;font-weight:bold">PyRef&lt;/span>&amp;lt;&amp;#39;&lt;span style="color:#658b00">_&lt;/span>,&lt;span style="color:#bbb"> &lt;/span>Self&amp;gt;&lt;span style="color:#bbb"> &lt;/span>{&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>slf&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>}&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">fn&lt;/span> &lt;span style="color:#008b45">__anext__&lt;/span>(slf: &lt;span style="color:#008b45;font-weight:bold">PyRefMut&lt;/span>&amp;lt;&amp;#39;&lt;span style="color:#658b00">_&lt;/span>,&lt;span style="color:#bbb"> &lt;/span>Self&amp;gt;)&lt;span style="color:#bbb"> &lt;/span>-&amp;gt; &lt;span style="color:#008b45;font-weight:bold">PyResult&lt;/span>&amp;lt;&lt;span style="color:#658b00">Option&lt;/span>&amp;lt;PyObject&amp;gt;&amp;gt;&lt;span style="color:#bbb"> &lt;/span>{&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">let&lt;/span>&lt;span style="color:#bbb"> &lt;/span>count&lt;span style="color:#bbb"> &lt;/span>=&lt;span style="color:#bbb"> &lt;/span>slf.count.clone();&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">let&lt;/span>&lt;span style="color:#bbb"> &lt;/span>fut&lt;span style="color:#bbb"> &lt;/span>=&lt;span style="color:#bbb"> &lt;/span>pyo3_asyncio::tokio::future_into_py(slf.py(),&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">async&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">move&lt;/span>&lt;span style="color:#bbb"> &lt;/span>{&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">let&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">mut&lt;/span>&lt;span style="color:#bbb"> &lt;/span>count&lt;span style="color:#bbb"> &lt;/span>=&lt;span style="color:#bbb"> &lt;/span>count.lock().unwrap();&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span>&lt;span style="color:#bbb"> &lt;/span>*count&lt;span style="color:#bbb"> &lt;/span>&amp;lt;&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#b452cd">5&lt;/span>&lt;span style="color:#bbb"> &lt;/span>{&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>*count&lt;span style="color:#bbb"> &lt;/span>+=&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#b452cd">1&lt;/span>;&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#658b00">Ok&lt;/span>(Python::with_gil(|py|&lt;span style="color:#bbb"> &lt;/span>count.into_py(py)))&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>}&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">else&lt;/span>&lt;span style="color:#bbb"> &lt;/span>{&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#658b00">Err&lt;/span>(PyStopAsyncIteration::new_err(&lt;span style="color:#cd5555">&amp;#34;stream exhausted&amp;#34;&lt;/span>))&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>}&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>})?;&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#658b00">Ok&lt;/span>(&lt;span style="color:#658b00">Some&lt;/span>(fut.into()))&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>}&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">&lt;/span>}&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>There is a bit of boilerplate code. Hope &lt;a href="https://github.com/PyO3/pyo3/issues/3246">PyO3 0.20&lt;/a> will
make it easier.&lt;/p>
&lt;p>We can use the async iterator in Python.&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8b008b;font-weight:bold">async&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">for&lt;/span> i &lt;span style="color:#8b008b">in&lt;/span> pyo3_test.PyAsyncIter():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#658b00">print&lt;/span>(i)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The output is &lt;code>1&lt;/code>, &lt;code>2&lt;/code>, &lt;code>3&lt;/code>, &lt;code>4&lt;/code>, &lt;code>5&lt;/code>.&lt;/p>
&lt;h1 id="summary">Summary&lt;/h1>
&lt;p>PyO3 is a very powerful library for building Python bindings. We can build very Pythonic modules
in Rust.&lt;/p>
&lt;p>Finally, we will implement a Python module in Rust.&lt;/p>
- https://aspcompiler.github.io/posts/a-first-look-of-pyo3/ - 2023 Li Chen</description></item><item><title>The speed of gRPC Python is very impressive and that deserves a dive</title><link>https://aspcompiler.github.io/posts/grpc-python-is-fast/</link><pubDate>Fri, 14 Jul 2023 15:43:15 -0700</pubDate><guid>https://aspcompiler.github.io/posts/grpc-python-is-fast/</guid><description>Li Chen's blog https://aspcompiler.github.io/posts/grpc-python-is-fast/ -&lt;h1 id="intro">Intro&lt;/h1>
&lt;p>Recently, I did a small experiment to compare the &lt;a href="https://github.com/aspcompiler/grpc-perf">performance&lt;/a> of gRPC Python and other languages. The result is very impressive. I would expect to see a interpreted code many times slower than a native code. Intuitively, this can only happen if the code is mostly native. Let us dive in to see how it was implemented.&lt;/p>
&lt;h1 id="grpc-python-implementation">gRPC Python implementation&lt;/h1>
&lt;p>gRPC has 2 major parts. Its serializer is built upon &lt;a href="https://github.com/protocolbuffers/protobuf">protobuf&lt;/a>. The RPC part is built upon HTTP/2.&lt;/p>
&lt;p>The gRPC project is driven by the RFP process. gRPC Python has the following RFPs:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>L13 &lt;a href="https://github.com/grpc/proposal/blob/master/L13-python-interceptors.md">https://github.com/grpc/proposal/blob/master/L13-python-interceptors.md&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>L42 &lt;a href="https://github.com/grpc/proposal/blob/master/L42-python-metadata-flags.md">https://github.com/grpc/proposal/blob/master/L42-python-metadata-flags.md&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>L44 &lt;a href="https://github.com/grpc/proposal/blob/master/L44-python-rich-status.md">https://github.com/grpc/proposal/blob/master/L44-python-rich-status.md&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>L46 &lt;a href="https://github.com/grpc/proposal/blob/master/L46-python-compression-api.md">https://github.com/grpc/proposal/blob/master/L46-python-compression-api.md&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>L54 &lt;a href="https://github.com/grpc/proposal/blob/master/L54-python-server-wait.md">https://github.com/grpc/proposal/blob/master/L54-python-server-wait.md&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>L58 &lt;a href="https://github.com/grpc/proposal/blob/master/L58-python-async-api.md">https://github.com/grpc/proposal/blob/master/L58-python-async-api.md&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>L64 &lt;a href="https://github.com/grpc/proposal/blob/master/L64-python-runtime-proto-parsing.md">https://github.com/grpc/proposal/blob/master/L64-python-runtime-proto-parsing.md&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>L65 &lt;a href="https://github.com/grpc/proposal/blob/master/L65-python-package-name.md">https://github.com/grpc/proposal/blob/master/L65-python-package-name.md&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>L78 &lt;a href="https://github.com/grpc/proposal/blob/master/L78-python-rich-server-context.md">https://github.com/grpc/proposal/blob/master/L78-python-rich-server-context.md&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>L95 &lt;a href="https://github.com/grpc/proposal/blob/master/L95-python-reflection-client.md">https://github.com/grpc/proposal/blob/master/L95-python-reflection-client.md&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Out of them, L58 and L64 are the most interesting one. L58 is the async API. L64 is the runtime proto parsing. They are the core of the implementation.&lt;/p>
&lt;h1 id="async-api">Async API&lt;/h1>
&lt;p>L58 is a great document that is fun to read.&lt;/p>
&lt;p>The most interesting part of &lt;code>grpcio&lt;/code>, the async Python gRPC API, is that it is a wrapper over the gRPC C++ API but used the Python async model. It other words, it does not use the Python networking stack but used the networking stack of the C++ API. How are they married together?&lt;/p>
&lt;p>It turns out that the C++ API has a &lt;a href="https://grpc.github.io/grpc/cpp/classgrpc_1_1_completion_queue.html">CompletionQueue&lt;/a> interface. It allow
the clients to &lt;a href="https://grpc.io/docs/languages/cpp/async/">poll for the completion status with tag&lt;/a>.&lt;/p>
&lt;p>Any async framework requires a mechanism to yield control. Python uses &lt;a href="https://stackoverflow.com/questions/49005651/how-does-asyncio-actually-work">generator to yield&lt;/a>. Therefore, we can imaging that the wrapper just need to poll the completion queue and yield the results in the generator.&lt;/p>
&lt;p>The result is a very elegant API that allows users to implement a streaming server with extreme simplicity:&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8b008b;font-weight:bold">class&lt;/span> &lt;span style="color:#008b45;font-weight:bold">Greeter&lt;/span>(helloworld_pb2_grpc.GreeterServicer):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8b008b;font-weight:bold">async&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">def&lt;/span> &lt;span style="color:#008b45">StreamingHi&lt;/span>(self, request_iterator, context):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8b008b;font-weight:bold">async&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">for&lt;/span> request &lt;span style="color:#8b008b">in&lt;/span> request_iterator:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8b008b;font-weight:bold">yield&lt;/span> response
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>asyncio&lt;/code> is integrated C++ API using &lt;a href="https://cython.org/">Cython&lt;/a>.&lt;/p>
&lt;h1 id="cython">Cython&lt;/h1>
&lt;p>I was previously not familiar with Cython. I thought it is just a Python to C++ compiler. Many of the integrations that I have seen
where implemented using &lt;a href="https://github.com/pybind/pybind11">pybind11&lt;/a> for Python/C++ binding or &lt;a href="https://github.com/PyO3/pyo3">pyo3&lt;/a>
for Python/Rust binding.&lt;/p>
&lt;p>It turns out that Cython is also very interesting. It is a very old project dating back to 15 years ago. It has 2 syntaxes, one with the .pyx extension and the other with the .pxd extension.&lt;/p>
&lt;p>The .pyx extension is a superset of Python. It allows us to add type hints to Python so that it can generate good C++ code; remember that Python
did not have type hints 15 years ago so that .pyx extension was invented to define the Python interface.&lt;/p>
&lt;p>The .pxd extension allows us to export C++ API to Python.&lt;/p>
&lt;p>The 2 extensions are sometimes used together to allow Python and C++ to meet half way. The tool then generates C++ code that can be compiled into a Python extension. We can inspect the generated code.&lt;/p>
&lt;h1 id="protobuf">Protobuf&lt;/h1>
&lt;p>&lt;code>asyncio&lt;/code> uses the same Protobuf code as the sync code. This implementation uses the C++ protobuf runtime already built into the grpcio-tools C extension to parse the protocol buffers and generate textual Python code in memory. This code is then used to instantiate the modules to be provided to the calling application. This will be more clear when we look at the generated files.&lt;/p>
&lt;h1 id="generated-files">Generated files&lt;/h1>
&lt;p>The code generated from the proto file looks like:&lt;/p>
&lt;ul>
&lt;li>server_streaming_pb2.pyi&lt;/li>
&lt;li>server_streaming_pb2.py&lt;/li>
&lt;li>server_streaming_pb2_grpc.py&lt;/li>
&lt;/ul>
&lt;p>The first 2 files are for protobuf. The last one is for gRPC.&lt;/p>
&lt;p>&lt;code>server_streaming_pb2.pyi&lt;/code> looks like:&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8b008b;font-weight:bold">class&lt;/span> &lt;span style="color:#008b45;font-weight:bold">StreamingFromServerRequest&lt;/span>(_message.Message):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> __slots__ = [&lt;span style="color:#cd5555">&amp;#34;num_bytes&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NUM_BYTES_FIELD_NUMBER: _ClassVar[&lt;span style="color:#658b00">int&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> num_bytes: &lt;span style="color:#658b00">int&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8b008b;font-weight:bold">def&lt;/span> __init__(self, num_bytes: _Optional[&lt;span style="color:#658b00">int&lt;/span>] = ...) -&amp;gt; &lt;span style="color:#8b008b;font-weight:bold">None&lt;/span>: ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8b008b;font-weight:bold">class&lt;/span> &lt;span style="color:#008b45;font-weight:bold">StreamingFromServerResponse&lt;/span>(_message.Message):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> __slots__ = [&lt;span style="color:#cd5555">&amp;#34;data&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> DATA_FIELD_NUMBER: _ClassVar[&lt;span style="color:#658b00">int&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> data: &lt;span style="color:#658b00">bytes&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8b008b;font-weight:bold">def&lt;/span> __init__(self, data: _Optional[&lt;span style="color:#658b00">bytes&lt;/span>] = ...) -&amp;gt; &lt;span style="color:#8b008b;font-weight:bold">None&lt;/span>: ...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Note that it just define the interface for Python tools to use. It does not contain any implementation. The implementation is in
&lt;code> server_streaming_pb2.py&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(&lt;span style="color:#cd5555">b&lt;/span>&lt;span style="color:#cd5555">&amp;#39;&lt;/span>&lt;span style="color:#cd5555">\n\x16&lt;/span>&lt;span style="color:#cd5555">server_streaming.proto&lt;/span>&lt;span style="color:#cd5555">\x12\x10&lt;/span>&lt;span style="color:#cd5555">server_streaming&lt;/span>&lt;span style="color:#cd5555">\&amp;#34;&lt;/span>&lt;span style="color:#cd5555">/&lt;/span>&lt;span style="color:#cd5555">\n\x1a&lt;/span>&lt;span style="color:#cd5555">StreamingFromServerRequest&lt;/span>&lt;span style="color:#cd5555">\x12\x11\n\t&lt;/span>&lt;span style="color:#cd5555">num_bytes&lt;/span>&lt;span style="color:#cd5555">\x18\x01&lt;/span>&lt;span style="color:#cd5555"> &lt;/span>&lt;span style="color:#cd5555">\x01&lt;/span>&lt;span style="color:#cd5555">(&lt;/span>&lt;span style="color:#cd5555">\x05\&amp;#34;&lt;/span>&lt;span style="color:#cd5555">+&lt;/span>&lt;span style="color:#cd5555">\n\x1b&lt;/span>&lt;span style="color:#cd5555">StreamingFromServerResponse&lt;/span>&lt;span style="color:#cd5555">\x12\x0c\n\x04\x64\x61&lt;/span>&lt;span style="color:#cd5555">ta&lt;/span>&lt;span style="color:#cd5555">\x18\x01&lt;/span>&lt;span style="color:#cd5555"> &lt;/span>&lt;span style="color:#cd5555">\x01&lt;/span>&lt;span style="color:#cd5555">(&lt;/span>&lt;span style="color:#cd5555">\x0c\x32\x87\x01\n\x0f&lt;/span>&lt;span style="color:#cd5555">ServerStreaming&lt;/span>&lt;span style="color:#cd5555">\x12&lt;/span>&lt;span style="color:#cd5555">t&lt;/span>&lt;span style="color:#cd5555">\n\x13&lt;/span>&lt;span style="color:#cd5555">StreamingFromServer&lt;/span>&lt;span style="color:#cd5555">\x12&lt;/span>&lt;span style="color:#cd5555">,.server_streaming.StreamingFromServerRequest&lt;/span>&lt;span style="color:#cd5555">\x1a&lt;/span>&lt;span style="color:#cd5555">-.server_streaming.StreamingFromServerResponse0&lt;/span>&lt;span style="color:#cd5555">\x01\x62\x06&lt;/span>&lt;span style="color:#cd5555">proto3&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>_globals = &lt;span style="color:#658b00">globals&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, _globals)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, &lt;span style="color:#cd5555">&amp;#39;server_streaming_pb2&amp;#39;&lt;/span>, _globals)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> _descriptor._USE_C_DESCRIPTORS == &lt;span style="color:#8b008b;font-weight:bold">False&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> DESCRIPTOR._options = &lt;span style="color:#8b008b;font-weight:bold">None&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _globals[&lt;span style="color:#cd5555">&amp;#39;_STREAMINGFROMSERVERREQUEST&amp;#39;&lt;/span>]._serialized_start=&lt;span style="color:#b452cd">44&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _globals[&lt;span style="color:#cd5555">&amp;#39;_STREAMINGFROMSERVERREQUEST&amp;#39;&lt;/span>]._serialized_end=&lt;span style="color:#b452cd">91&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _globals[&lt;span style="color:#cd5555">&amp;#39;_STREAMINGFROMSERVERRESPONSE&amp;#39;&lt;/span>]._serialized_start=&lt;span style="color:#b452cd">93&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _globals[&lt;span style="color:#cd5555">&amp;#39;_STREAMINGFROMSERVERRESPONSE&amp;#39;&lt;/span>]._serialized_end=&lt;span style="color:#b452cd">136&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _globals[&lt;span style="color:#cd5555">&amp;#39;_SERVERSTREAMING&amp;#39;&lt;/span>]._serialized_start=&lt;span style="color:#b452cd">139&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _globals[&lt;span style="color:#cd5555">&amp;#39;_SERVERSTREAMING&amp;#39;&lt;/span>]._serialized_end=&lt;span style="color:#b452cd">274&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>This is not quite readable, but we can imagine that it just deserialize some data and load into the C++ code. The C++ code
then have the data structures needed to parse the protocol buffers.&lt;/p>
&lt;p>Let us now look at the gRPC code &lt;code>server_streaming_pb2_grpc.py&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8b008b;font-weight:bold">class&lt;/span> &lt;span style="color:#008b45;font-weight:bold">ServerStreaming&lt;/span>(&lt;span style="color:#658b00">object&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cd5555">&amp;#34;&amp;#34;&amp;#34;Missing associated documentation comment in .proto file.&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#707a7c">@staticmethod&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8b008b;font-weight:bold">def&lt;/span> &lt;span style="color:#008b45">StreamingFromServer&lt;/span>(request,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> target,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> options=(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> channel_credentials=&lt;span style="color:#8b008b;font-weight:bold">None&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> call_credentials=&lt;span style="color:#8b008b;font-weight:bold">None&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> insecure=&lt;span style="color:#8b008b;font-weight:bold">False&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> compression=&lt;span style="color:#8b008b;font-weight:bold">None&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> wait_for_ready=&lt;span style="color:#8b008b;font-weight:bold">None&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> timeout=&lt;span style="color:#8b008b;font-weight:bold">None&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> metadata=&lt;span style="color:#8b008b;font-weight:bold">None&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> grpc.experimental.unary_stream(request, target, &lt;span style="color:#cd5555">&amp;#39;/server_streaming.ServerStreaming/StreamingFromServer&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> server__streaming__pb2.StreamingFromServerRequest.SerializeToString,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> server__streaming__pb2.StreamingFromServerResponse.FromString,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> options, channel_credentials,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>As we can see, it calls &lt;code>grpc.experimental.unary_stream&lt;/code> and passes the serializer/deserializer from the protobuf code. The &lt;code>unary_stream&lt;/code> is because this method happen to be a unary stream call. Other possible calls unary unary, stream unary, and stream stream.&lt;/p>
&lt;p>Isn&amp;rsquo;t this implementation very elegant?&lt;/p>
&lt;h1 id="some-more-details">Some more details&lt;/h1>
&lt;p>It turns out there are several C++ protobuf implementations. We can find out which one is used by running the following code:&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a61717;background-color:#e3d2d2">$&lt;/span> python
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Python &lt;span style="color:#b452cd">3.10.9&lt;/span> (main, Dec &lt;span style="color:#b452cd">7&lt;/span> &lt;span style="color:#b452cd">2022&lt;/span>, &lt;span style="color:#b452cd">13&lt;/span>:&lt;span style="color:#b452cd">47&lt;/span>:&lt;span style="color:#b452cd">07&lt;/span>) [GCC &lt;span style="color:#b452cd">12.2.0&lt;/span>] on linux
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Type &lt;span style="color:#cd5555">&amp;#34;help&amp;#34;&lt;/span>, &lt;span style="color:#cd5555">&amp;#34;copyright&amp;#34;&lt;/span>, &lt;span style="color:#cd5555">&amp;#34;credits&amp;#34;&lt;/span> &lt;span style="color:#8b008b">or&lt;/span> &lt;span style="color:#cd5555">&amp;#34;license&amp;#34;&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">for&lt;/span> more information.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; &lt;span style="color:#8b008b;font-weight:bold">from&lt;/span> &lt;span style="color:#008b45;text-decoration:underline">google.protobuf.internal&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">import&lt;/span> api_implementation
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; &lt;span style="color:#658b00">print&lt;/span>(api_implementation.Type())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>upb
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Upc is currently Preferred. We can find more details from &lt;a href="https://github.com/protocolbuffers/upb/tree/main/python">https://github.com/protocolbuffers/upb/tree/main/python&lt;/a>&lt;/p>
&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;p>gRPC Python is extremely fast because it is mostly built around the C++ API.&lt;/p>
&lt;p>The implementation using Cython is very elegant and we can borrow the idea to speed up our own Python code.&lt;/p>
- https://aspcompiler.github.io/posts/grpc-python-is-fast/ - 2023 Li Chen</description></item><item><title>The Remaking of My Blog with Hugo</title><link>https://aspcompiler.github.io/posts/remaking-of-my-blog/</link><pubDate>Sat, 28 Jan 2023 22:16:35 -0800</pubDate><guid>https://aspcompiler.github.io/posts/remaking-of-my-blog/</guid><description>Li Chen's blog https://aspcompiler.github.io/posts/remaking-of-my-blog/ -&lt;h1 id="the-remaking">The remaking&lt;/h1>
&lt;p>I have not blogged since I joined Amazon in 2016. My initial focus was &lt;a href="https://www.amazon.jobs/content/en/our-workplace/leadership-principles">delivery results&lt;/a> and then I had to deal with a massive volume of customer interactions and data as the result. Now I want to blog again as I spend significant time doing R&amp;amp;D at AWS Center for Quantum Computing and I need to capture what I learnt, and hopefully that benefits others as well. My original blog site was developed on &lt;a href="https://docs.github.com/en/pages/setting-up-a-github-pages-site-with-jekyll">github pages using Jekyll&lt;/a>. The Jekyll has changed significantly so that the side will not build.&lt;/p>
&lt;h1 id="the-first-attempt-updating-jekyll">The first attempt: updating Jekyll&lt;/h1>
&lt;p>Updating Jekyll has not been a smooth ride. Jekyll is developed in &lt;a href="https://www.ruby-lang.org/en/">Ruby&lt;/a>. The latest version of Ruby is currently 3.2 but github pages is only compatible with 3.1.3. So one actually has to start with a Ruby version manager such as &lt;a href="https://jekyllrb.com/docs/installation/macos/">chruby&lt;/a> to have multiple versions of Ruby in a system. Then one has to install Ruby Gems into per project environment using &lt;a href="https://jekyllrb.com/docs/ruby-101/">bundler&lt;/a>. Then once every few months, I need to update my Gems and ensure that they are compatible with each other. That is a bit too much maintenance if I just need a tool to write a blog.&lt;/p>
&lt;h1 id="trying-hugo">Trying Hugo&lt;/h1>
&lt;p>&lt;a href="https://gohugo.io/">Hugo&lt;/a> is another popular static site generator written in &lt;a href="https://go.dev/">Go&lt;/a>. Hugo developers have resolved all dependency conflicts at build time to make it a single executable so that the installation is extremely easy.&lt;/p>
&lt;p>Hugo deploys hugo modules as git submodules so &lt;a href="https://git-scm.com/">git&lt;/a> is required. This is a bit harsh for non-software-developers but OK for me. Using git submodules for distributing/versioning dependencies definitely is not as easy as versioned packages. However, I have only one submodule which is my &lt;a href="https://github.com/AmazingRise/hugo-theme-diary">Dairy theme&lt;/a> which has more features than I currently need. Let us see how it goes.&lt;/p>
&lt;h1 id="getting-started">Getting Started&lt;/h1>
&lt;p>The installation is very straight-forward. Just follow the &lt;a href="https://gohugo.io/categories/installation/">instructions for each platform&lt;/a>.&lt;/p>
&lt;p>Then one can just follow &lt;a href="https://gohugo.io/getting-started/quick-start/">quick start&lt;/a>. When I get to the step of adding &lt;code>ananke&lt;/code> theme, I jumped to the &lt;a href="https://github.com/AmazingRise/hugo-theme-diary#quick-start">Dairy theme instructions&lt;/a> instead. Expand the section under &lt;code>Quick Start&lt;/code> to find the instructions.&lt;/p>
&lt;h1 id="adding-contents">Adding Contents&lt;/h1>
&lt;p>To add a new post, type:&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>hugo new posts/my-first-post.md
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>You can also type:&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>hugo new posts/my-first-post/index.md
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The main difference is that the latter will create a directory for my-first-post. If the post contains images, you can add it to the same directory.&lt;/p>
&lt;p>I also added an about page:&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>hugo new about/index.md
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>To prevent the about page showing up like a blog, just locate the front matter which is a section at the beginning of the page and remove the &lt;code>date&lt;/code> entry:&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-md" data-lang="md">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>title: &amp;#34;About Me&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>draft: false
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>To build the static web site locally, run:&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>hugo server
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>To include the draft pages, run:&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>hugo server -D
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="configuration">Configuration&lt;/h1>
&lt;p>Most of the configurations are in the &lt;code>config.toml&lt;/code> file. One first needs to follow the instructions to set &lt;code>baseUrl&lt;/code>, &lt;code>title&lt;/code>, &lt;code>theme&lt;/code>, etc.&lt;/p>
&lt;h2 id="configuring-main-menu">Configuring Main Menu&lt;/h2>
&lt;p>Configuring the main menu is pretty straightforward. Just add several &lt;code>[[menu.main]]&lt;/code> elements. The double square-bracket means array in toml.&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>[[menu.main]]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>url = &lt;span style="color:#cd5555">&amp;#34;/about&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>name = &lt;span style="color:#cd5555">&amp;#34;About&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>weight = &lt;span style="color:#b452cd">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[[menu.main]]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>url = &lt;span style="color:#cd5555">&amp;#34;/posts&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>name = &lt;span style="color:#cd5555">&amp;#34;Posts&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>weight = &lt;span style="color:#b452cd">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[[menu.main]]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>url = &lt;span style="color:#cd5555">&amp;#34;/index.xml&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>name = &lt;span style="color:#cd5555">&amp;#34;RSS Feed&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>weight = &lt;span style="color:#b452cd">3&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Hugo recognizes some of the urls like &lt;code>posts&lt;/code> and &lt;code>index.xml&lt;/code> out of the box while we have to add contents for &lt;code>about&lt;/code>.&lt;/p>
&lt;h2 id="comments">Comments&lt;/h2>
&lt;p>Hugo supports several comment systems from free to paid. One of the easiest free ones is &lt;a href="https://utteranc.es/">utterance&lt;/a> which uses github issues to store comments. The configuration for utterance is:&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>[params.utterances]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>repo=&lt;span style="color:#cd5555">&amp;#34;aspcompiler/aspcompiler.github.io&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>theme=&lt;span style="color:#cd5555">&amp;#34;github-light&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="search">Search&lt;/h2>
&lt;p>One of the easiest ways to get search functionality is to configure &lt;a href="https://github.com/AmazingRise/hugo-theme-diary/wiki/Customization#add-google-search-box-on-your-site">google search&lt;/a>.&lt;/p>
&lt;h2 id="syntax-highlighter">Syntax Highlighter&lt;/h2>
&lt;p>Dairy theme has a default &lt;a href="https://github.com/AmazingRise/hugo-theme-diary/wiki/Customization#about-highlight">code highlighter&lt;/a> and we will see how it goes.&lt;/p>
&lt;h2 id="cicd">CI/CD&lt;/h2>
&lt;p>To deploy to &lt;code>site.github.io&lt;/code>, one has to configure github action to build the site. This is basically adding and config the page &lt;code>.github/workflows/gh-pages.yml&lt;/code>. Follow the &lt;a href="https://gohugo.io/hosting-and-deployment/hosting-on-github/">instructions&lt;/a> from Hugo. In &lt;code>gh-pages.yml&lt;/code>, uncomment the line that says &lt;code>extended: true&lt;/code>. After the github action runs successfully, go to github Settings -&amp;gt; Pages, under the &lt;code>Build and deployment&lt;/code> section, change the branch to &lt;code>gh-pages&lt;/code>. Then the pages should deploy to https://&amp;lt;USERNAME|ORGANIZATION&amp;gt;.github.io/.&lt;/p>
&lt;h2 id="trying-this-site">Trying this site&lt;/h2>
&lt;p>To try this site locally, follow the instructions above to install &lt;code>Hugo&lt;/code> and its prerequisites. Then clone the projects:&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git clone --recurse-submodules https://github.com/aspcompiler/aspcompiler.github.io.git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#658b00">cd&lt;/span> aspcompiler.github.io
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hugo server
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>If the site is cloned with the &lt;code>--recurse-submodules&lt;/code> argument, run the following after the fact:&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git submodule update --init --recursive
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>- https://aspcompiler.github.io/posts/remaking-of-my-blog/ - 2023 Li Chen</description></item></channel></rss>