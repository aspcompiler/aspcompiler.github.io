<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Li Chen's blog</title><link>https://aspcompiler.github.io/posts/</link><description>Recent content in Posts on Li Chen's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>2023 Li Chen</copyright><lastBuildDate>Sun, 19 Nov 2023 09:45:56 -0800</lastBuildDate><atom:link href="https://aspcompiler.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>How Rust gets an x speedup over Python - Part 2</title><link>https://aspcompiler.github.io/posts/how-rust-x-speedup-over-python-2/</link><pubDate>Sun, 19 Nov 2023 09:45:56 -0800</pubDate><guid>https://aspcompiler.github.io/posts/how-rust-x-speedup-over-python-2/</guid><description>Introduction In the part 1 of this series, we tried to reproduce the speed up over Python in part 1 of a Modular blog, but in `Rust``. We achieved 46x speedup over the base case. In this blog, we will try to reproduce part 2 and part 3 of the modular blog.
SIMD We will first explore the SIMD instructions. SIMD stands for Single Instruction Multiple Data. SIMD instructions are a type of instructions that can be executed on multiple data in parallel.</description></item><item><title>How Rust gets an x speedup over Python - Part 1</title><link>https://aspcompiler.github.io/posts/how-rust-x-speedup-over-python-1/</link><pubDate>Fri, 10 Nov 2023 08:34:57 -0800</pubDate><guid>https://aspcompiler.github.io/posts/how-rust-x-speedup-over-python-1/</guid><description>Introduction Inspired by the Modular bog series, part 1, part 2, and part 3, I want to see what kind of speedup I can get with Rust.
The baseline I will use the same Mandelbrot set example. For an explanation of the algorithm, see the part 1 of the Modular blog posts linked above.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 import numpy as np import matplotlib.</description></item><item><title>Is Rust a Good Language for Machine Learning?</title><link>https://aspcompiler.github.io/posts/rust-machine-learning/</link><pubDate>Mon, 04 Sep 2023 08:09:34 -0700</pubDate><guid>https://aspcompiler.github.io/posts/rust-machine-learning/</guid><description>Introduction Rust has been known for its performance and memory/thread safety. However, it takes an ecosystem to be successful. So far, Rust has found a lot of success in network programming and bit coin mining. Rust has an excellent support for async making it a great language any time we need distributed systems.
For the reason, Rust has found a lot of success in vector databases.
Vector Databases There are several start-up companies that are building vector databases using Rust: Pinecone, Qdrant and Fennel.</description></item><item><title>Practical Rust Ownership</title><link>https://aspcompiler.github.io/posts/practical-rust-ownership/</link><pubDate>Sat, 19 Aug 2023 10:32:41 -0700</pubDate><guid>https://aspcompiler.github.io/posts/practical-rust-ownership/</guid><description>Introduction Rust ownership is often listed as one of the top challenging areas of Rust. Contributing to this challenge is that the practical perspective of the Rust ownership is spread across many chapters the Rust book. In this post, I will attempt to work through Rust ownership in a practical perspective.
I do not intend this post to be an introduction material that cover every details. Instead, I intend this to be a guide that points to various Rust book chapters.</description></item><item><title>A First Look of PyO3</title><link>https://aspcompiler.github.io/posts/a-first-look-of-pyo3/</link><pubDate>Sat, 29 Jul 2023 22:33:22 -0700</pubDate><guid>https://aspcompiler.github.io/posts/a-first-look-of-pyo3/</guid><description>Introduction PyO3 is a Rust library for building Python bindings. In this post, we will try to build a simple Python module with a few features using PyO3. For exhaustive documentation, please refer to the PyO3 user guide.
Setup To learn how to setup PyO3, please follow the PyO3 user guide. I have save my code in this repository. Please follow the README there to run my code.
A Simple Python Module Let us implement a single Python function in Rust.</description></item><item><title>The speed of gRPC Python is very impressive and that deserves a dive</title><link>https://aspcompiler.github.io/posts/grpc-python-is-fast/</link><pubDate>Fri, 14 Jul 2023 15:43:15 -0700</pubDate><guid>https://aspcompiler.github.io/posts/grpc-python-is-fast/</guid><description>Intro Recently, I did a small experiment to compare the performance of gRPC Python and other languages. The result is very impressive. I would expect to see a interpreted code many times slower than a native code. Intuitively, this can only happen if the code is mostly native. Let us dive in to see how it was implemented.
gRPC Python implementation gRPC has 2 major parts. Its serializer is built upon protobuf.</description></item><item><title>The Remaking of My Blog with Hugo</title><link>https://aspcompiler.github.io/posts/remaking-of-my-blog/</link><pubDate>Sat, 28 Jan 2023 22:16:35 -0800</pubDate><guid>https://aspcompiler.github.io/posts/remaking-of-my-blog/</guid><description>The remaking I have not blogged since I joined Amazon in 2016. My initial focus was delivery results and then I had to deal with a massive volume of customer interactions and data as the result. Now I want to blog again as I spend significant time doing R&amp;amp;D at AWS Center for Quantum Computing and I need to capture what I learnt, and hopefully that benefits others as well. My original blog site was developed on github pages using Jekyll.</description></item></channel></rss>