<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>LLVM on Li Chen's blog</title><link>https://aspcompiler.github.io/tags/llvm/</link><description>Recent content in LLVM on Li Chen's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>2023 Li Chen</copyright><lastBuildDate>Wed, 12 Jul 2023 23:28:48 -0700</lastBuildDate><atom:link href="https://aspcompiler.github.io/tags/llvm/index.xml" rel="self" type="application/rss+xml"/><item><title>LLVM for the impatient (2)</title><link>https://aspcompiler.github.io/posts/llvm-for-the-impatient-2/</link><pubDate>Wed, 12 Jul 2023 23:28:48 -0700</pubDate><guid>https://aspcompiler.github.io/posts/llvm-for-the-impatient-2/</guid><description>Introduction In the previous installation, we provided a way to get started hands-on with LLVM with minimum effort. In this blog, we will follow the chapter 3 and chapter 4 of the LLVM tutorial to generate code.
Chapter 3 is about building the LLVM intermediate representation(IR) from the AST. Chapter 4 is about optimization passes as well as the just-in-time(JIT) compilation.
While the LLVM tutorials are very detailed, I will try to summarize the key points and provide some additional explanations.</description></item><item><title>LLVM for the impatient (1)</title><link>https://aspcompiler.github.io/posts/llvm-for-the-impatient-1/</link><pubDate>Sat, 04 Feb 2023 14:42:43 -0800</pubDate><guid>https://aspcompiler.github.io/posts/llvm-for-the-impatient-1/</guid><description>Intro LLVM is a common compiler backend. If you are writing a new language, you just need to target the LLVM backend. Then you will be able to use all the great optimization passes and target all the platforms that LLVM supports.
A best way to get started with LLVM is by following the tutorial. The intended audience for this series is:
Those who are learning from the tutorial but sometimes lost in the details.</description></item></channel></rss>